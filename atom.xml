<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I sudo X</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://isudox.com/"/>
  <updated>2016-10-02T15:50:27.935Z</updated>
  <id>http://isudox.com/</id>
  
  <author>
    <name>sudoz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 Flask Context</title>
    <link href="http://isudox.com/2016/10/02/flask-context-guide/"/>
    <id>http://isudox.com/2016/10/02/flask-context-guide/</id>
    <published>2016-10-02T12:11:40.000Z</published>
    <updated>2016-10-02T15:50:27.935Z</updated>
    
    <content type="html"><![CDATA[<p>Flask Context 类似 Spring 框架的核心组件 Context，给应用程序提供运行时所需的环境、状态、变量。Flask Web 开发中常用的 <code>current_app</code>、<code>request</code> 都是 Context。</p>
<a id="more"></a>
<p>Flask 提供了 4 个 Context：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Context</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">flask.current_app</td>
<td style="text-align:center">Application Context</td>
<td style="text-align:center">当前 app 的实例对象</td>
</tr>
<tr>
<td style="text-align:center">flask.g</td>
<td style="text-align:center">Application Context</td>
<td style="text-align:center">处理请求时用作临时存储的对象</td>
</tr>
<tr>
<td style="text-align:center">flask.request</td>
<td style="text-align:center">Request Context</td>
<td style="text-align:center">封装了 HTTP 请求中的内容</td>
</tr>
<tr>
<td style="text-align:center">flask.session</td>
<td style="text-align:center">Request Context</td>
<td style="text-align:center">存储了用户回话</td>
</tr>
</tbody>
</table>
<p>这些 Context 定义在 Flask 源码（0.11）的 <code>global.py</code> 中，截取部分源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.local <span class="keyword">import</span> LocalStack, LocalProxy</div><div class="line"></div><div class="line">_request_ctx_stack = LocalStack()</div><div class="line">_app_ctx_stack = LocalStack()</div></pre></td></tr></table></figure>
<p><code>_request_ctx_stack</code> 和 <code>_app_ctx_stack</code> 分别是 Flask 存储 request context 和 application context 的全局栈，由 Werkzeug 库的 <code>LocalStack</code> 和 <code>LocalProxy</code> 创建实例。</p>
<hr>
<p>参考资料：</p>
<ul>
<li>Flask Docs</li>
<li>Python Web 开发实战（董伟明）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask Context 类似 Spring 框架的核心组件 Context，给应用程序提供运行时所需的环境、状态、变量。Flask Web 开发中常用的 &lt;code&gt;current_app&lt;/code&gt;、&lt;code&gt;request&lt;/code&gt; 都是 Context。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Python" scheme="http://isudox.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://isudox.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask 源码浅读</title>
    <link href="http://isudox.com/2016/09/29/dive-into-flask-source-code/"/>
    <id>http://isudox.com/2016/09/29/dive-into-flask-source-code/</id>
    <published>2016-09-29T07:40:04.000Z</published>
    <updated>2016-09-30T14:23:21.929Z</updated>
    
    <content type="html"><![CDATA[<p>Flask 是非常 Pythonic 的开源项目，非常值得深入学习，最新的稳定版是 0.11，由许多模块组成，相比 0.3 版的单文件工程，源码的阅读难度上也有所增加（0.3 还没有引入 Blueprint），本文就从 Flask 0.3 版的源码展开。</p>
<a id="more"></a>
<p>###</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://flask.pocoo.org/docs/0.11/" target="_blank" rel="external">Flask Docs</a></li>
<li><a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface" target="_blank" rel="external">Web Server Gateway Interface</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flask 是非常 Pythonic 的开源项目，非常值得深入学习，最新的稳定版是 0.11，由许多模块组成，相比 0.3 版的单文件工程，源码的阅读难度上也有所增加（0.3 还没有引入 Blueprint），本文就从 Flask 0.3 版的源码展开。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Python" scheme="http://isudox.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://isudox.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>跨域请求之 JSONP 和 CORS</title>
    <link href="http://isudox.com/2016/09/24/cross-site-jsonp-and-cors/"/>
    <id>http://isudox.com/2016/09/24/cross-site-jsonp-and-cors/</id>
    <published>2016-09-24T15:55:52.000Z</published>
    <updated>2016-09-24T18:28:24.388Z</updated>
    
    <content type="html"><![CDATA[<p>Web 开发中，跨域请求是个经常碰到的问题，因为涉及到网站安全，所以浏览器是拒绝跨域请求的。通常解决跨域会采用 <a href="https://en.wikipedia.org/wiki/JSONP" target="_blank" rel="external">JSONP</a>(JSON with Padding) 和 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">CORS</a>(Cross-Origin Resource Sharing)。</p>
<a id="more"></a>
<p>首先理清一个经常会被混淆的概念，AJAX(Asynchronous JavaScript and XML) 和跨域请求是两个不同的概念，AJAX 是异步请求和解析处理 XML 文档的方式，它在服务器端没有提供支持（CORS 是一种解决方案）的前提下，也是无法跨域的。</p>
<h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h3><p>跨域请求，顾名思义，就是从 A 地址向非同源的 B 地址发起了请求。参考 MDN 上对同源的定义:</p>
<blockquote>
<p>如果两个页面拥有相同的协议（protocol），端口（如果指定）和主机，那么这两个页面就属于同一个源（origin）。</p>
</blockquote>
<p>MDN 给了同源检测的示例，如果是相对 <a href="http://store.company.com/dir/page.html，那么" target="_blank" rel="external">http://store.company.com/dir/page.html，那么</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">URL</th>
<th style="text-align:center">结果</th>
<th style="text-align:center">原因</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://store.company.com/dir2/other.html" target="_blank" rel="external">http://store.company.com/dir2/other.html</a></td>
<td style="text-align:center">成功</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://store.company.com/dir/inner/another.html" target="_blank" rel="external">http://store.company.com/dir/inner/another.html</a></td>
<td style="text-align:center">成功</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://store.company.com/secure.html" target="_blank" rel="external">https://store.company.com/secure.html</a></td>
<td style="text-align:center">失败</td>
<td style="text-align:center">协议不同</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://store.company.com:81/dir/etc.html" target="_blank" rel="external">http://store.company.com:81/dir/etc.html</a></td>
<td style="text-align:center">失败</td>
<td style="text-align:center">端口不同</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://news.company.com/dir/other.html" target="_blank" rel="external">http://news.company.com/dir/other.html</a></td>
<td style="text-align:center">失败</td>
<td style="text-align:center">主机名不同</td>
</tr>
</tbody>
</table>
<p>严格的说，浏览器并不是拒绝所有的跨域请求，否则如果想从百度搜索结果页跳转到其他页面就是个伪命题，实际上拒绝的是跨域的读操作。浏览器的同源限制策略是这样执行的：</p>
<ul>
<li>通常浏览器允许进行跨域写操作（Cross-origin writes），如链接，重定向；</li>
<li>通常浏览器允许跨域资源嵌入（Cross-origin embedding），如 <code>img</code>、<code>script</code> 标签；</li>
<li>通常浏览器不允许跨域读操作（Cross-origin reads）。</li>
</ul>
<p>对于跨域资源的嵌入，实际开发中用的非常频繁，从外部引入 js、css、img 这些静态文件，都是被浏览器接受的。</p>
<p>下面对浏览器的同源策略做个测试，探探究竟。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// cross-origin request</span></div><div class="line"><span class="keyword">var</span> url = <span class="string">"http://search.jd.com/Search?keyword=python&amp;enc=utf-8&amp;wq=python"</span>;</div><div class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">request.open(<span class="string">"GET"</span>, url);</div><div class="line">request.send(<span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>浏览器控制台会出现错误信息（信息中的 Origin 为 null 是因为我是用浏览器直接打开 html，而不是通过 http server 访问 html）：</p>
<blockquote>
<p>XMLHttpRequest cannot load <a href="http://search.jd.com/Search?keyword=python&amp;enc=utf-8&amp;wq=python" target="_blank" rel="external">http://search.jd.com/Search?keyword=python&amp;enc=utf-8&amp;wq=python</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘null’ is therefore not allowed access.</p>
</blockquote>
<p>该请求来源的 Origin 不在可允许范围内，这种情况就是跨域请求被拒。下面是一个简单的本地 http server：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// local http server writtern by Node.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> port = <span class="number">8080</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request, response</span>)</span>&#123;</div><div class="line">    response.end(<span class="string">'Hello'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'request url: '</span> + request.url);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(handleRequest);</div><div class="line">server.listen(PORT, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Server listening on: http://localhost:%s"</span>, port);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>node simple-server.js</code> 运行，把请求的 URL 改成 <a href="http://localhost:8080，可以看到命令行终端输出日志，这就表明，请求实际上是从浏览器发出了，服务器也接收到了请求，但是浏览器在读取跨域返回的数据时被拒绝了。这就印证了" target="_blank" rel="external">http://localhost:8080，可以看到命令行终端输出日志，这就表明，请求实际上是从浏览器发出了，服务器也接收到了请求，但是浏览器在读取跨域返回的数据时被拒绝了。这就印证了</a> MDN 文档上说明的，浏览器不允许跨域读操作。</p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>JSONP 并不在 HTML 的标准里，而是开发者为了实现跨域请求而创造的一个 trick。在 HTML 中，可以通过 “src”、”img” 标签引入非同源的静态资源，这就给 JSONP 的实现提供了可能。</p>
<p>JSONP 的实现很简单，需要客户端和服务端配合。客户端在 HTML 中动态生成 <code>script</code> 标签，在 “src” 中引入请求的 URL + 回调函数，这样请求服务器返回的数据会交由回调函数处理，这样就实现了跨域读请求；服务端在接收到客户端请求后，首先取得客户端要回调的函数名，再生成 JavaScript 代码段返回给浏览器，浏览器在获取到返回结果后直接调用回调函数完成任务。</p>
<p>手写一段简陋的 JS 代码演示下 JSONP 的整个流程：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCallback</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(result.message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> jsonp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</div><div class="line">jsonp.type = <span class="string">'text/javascript'</span>;</div><div class="line">jsonp.src = <span class="string">'http://localhost:8080?callback=handleCallback'</span>;</div><div class="line">ele.appendChild(jsonp);</div><div class="line">ele.removeChild(jsonp);</div></pre></td></tr></table></figure>
<p>JSONP 只支持 GET 请求，而且需要服务器端来配合，如果服务器端返回一段恶意代码，客户端也会毅然决然的执行……JSONP 是一个伟大的创造，但还不够好。</p>
<h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 是W3C 推荐的一种新的官方方案，能是服务器支持 XMLHttpRequest 的跨域请求。CORS 实现起来非常方便，只需要增加一些 HTTP 头，让服务器能声明允许的访问来源。</p>
<p>浏览器对 CORS 的使用场景做了区分，有简单请求和非简单请求之分。MDN 对简单请求的定义条件是：</p>
<ul>
<li>只使用 GET, HEAD 或者 POST 请求方法。如果使用 POST 向服务器端传送数据，则数据类型(Content-Type)只能是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一种；</li>
<li>不会使用自定义请求头；</li>
</ul>
<p>浏览器（支持 CORS）对简单的跨域请求，会在请求头里加上 <code>Origin</code> 字段，向服务器说明请求源信息，包括协议、域名和端口，由服务器判断请求源是否在允许的域中。</p>
<p>编写一个简单请求，跨域获取信息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">"https://ipinfo.io/54.169.237.109/json?token=iplocation.net"</span>;</div><div class="line">$.ajax(&#123;</div><div class="line">    url: url</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>查看请求头信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Accept:*/*</div><div class="line">Accept-Encoding:gzip, deflate, sdch, br</div><div class="line">Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4</div><div class="line">Cache-Control:max-age=0</div><div class="line">Connection:keep-alive</div><div class="line">DNT:1</div><div class="line">Host:ipinfo.io</div><div class="line">Origin:https://isudox.com</div><div class="line">Referer:https://isudox.com/test.html</div><div class="line">User-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/52.0.2743.116 Chrome/52.0.2743.116 Safari/537.36</div></pre></td></tr></table></figure>
<p>浏览器自动给请求头添加了 <code>Origin</code> 字段，请求的服务端如果允许来自该 <code>Origin</code> 来源的请求，就会在响应头中添加 <code>Access-Control-Allow-Origin</code> 字段，参考上面请求的响应头：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Access-Control-Allow-Origin:*</div><div class="line">Connection:keep-alive</div><div class="line">Content-Encoding:gzip</div><div class="line">Content-Length:231</div><div class="line">Content-Type:application/json; charset=utf-8</div><div class="line">Server:nginx/1.8.1</div><div class="line">X-Content-Type-Options:nosniff</div></pre></td></tr></table></figure>
<p><code>Access-Control-Allow-Origin</code> 字段表明服务器接受来自任何请求源的跨域请求。因此，通过客户端的 <code>Origin</code> 和 服务端的 <code>Access-Control-Allow-Origin</code> 实现了跨域的 XMLHttpRequest 请求。</p>
<p>MDN 对非简单请求的定义条件为</p>
<ul>
<li>以 GET、HEAD、或者 POST 以外的方法发起，或者是请求数据为 application/x-www-form-urlencoded, multipart/form-data 或者 text/plain 以外的数据类型；</li>
<li>使用自定义请求头（比如添加诸如 X-PINGOTHER）</li>
</ul>
<p>非简单请求会先向服务器发送一个 <code>OPTIONS</code> 的“预请求”（preflight），来确认该跨域请求是否能被服务端允许，如果允许，则继续发送费简单请求，否则，XMLHttpRequest 的 onerror 回调函数会捕获到错误信息。</p>
<p>编写一个非简单请求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> url = <span class="string">'http://aruner.net/resources/access-control-with-post-preflight/'</span>;</div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">'POST'</span>, url, <span class="literal">true</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'X-PINGOTHER'</span>, <span class="string">'pingpong'</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/xml'</span>);</div><div class="line">xhr.send();</div></pre></td></tr></table></figure>
<p>预请求的请求头：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">OPTIONS /resources/post-here/ HTTP/1.1</div><div class="line">Host: bar.com</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Connection: keep-alive</div><div class="line">Origin: http://foo.example</div><div class="line">Access-Control-Request-Method: POST</div><div class="line">Access-Control-Request-Headers: X-PINGOTHER</div></pre></td></tr></table></figure>
<p>预请求由 <code>OPTIONS</code> 请求发出，<code>Access-Control-Request-Method</code> 字段标识跨域请求的方式，<code>Access-Control-Request-Headers</code> 字段标识跨域请求的自定义请求头名称，再加上 <code>Origin</code> 字段，服务端就能判断还没正式发过来的跨域请求是否是安全可允许的。</p>
<p>如果服务端允许该跨域请求，其响应头类似如下形式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</div><div class="line">Server: Apache/2.0.61 (Unix)</div><div class="line">Access-Control-Allow-Origin: http://foo.com</div><div class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</div><div class="line">Access-Control-Allow-Headers: X-PINGOTHER</div><div class="line">Access-Control-Max-Age: 1728000</div><div class="line">Vary: Accept-Encoding, Origin</div><div class="line">Content-Encoding: gzip</div><div class="line">Content-Length: 0</div><div class="line">Keep-Alive: timeout=2, max=100</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Type: text/plain</div></pre></td></tr></table></figure>
<p>其中，响应头中的 <code>Access-Control-*</code> 字段的具体含义如下：</p>
<ul>
<li><code>Access-Control-Allow-Origin</code> 标识可接受的跨域请求源；</li>
<li><code>Access-Control-Allow-Methods</code> 标识可接受的跨域请求方法；</li>
<li><code>Access-Control-Allow-Headers</code> 标识可接受的跨域请求自定义头；</li>
<li><code>Access-Control-Max-Age</code> 标识本次预请求的有效时间（秒），期间内无需再发送预请求；</li>
</ul>
<p>如果拒绝该跨域请求，错误信息也会被 <code>onerror</code> 回调捕获。</p>
<p>XMLHttpRequest 请求可以发送凭证请求（HTTP Cookies 和验证信息），通常不会跨域发送凭证信息，但也有一些情况需要打通不同的登录态，可以把 XMLHttpRequest 的 <code>withCredentials</code> 设置为 <code>true</code>，这样浏览器就能跨域发送凭证信息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.withCredentials = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<p>服务端返回的响应头中的 <code>Access-Control-Allow-Credentials</code> 字段存在且为 <code>true</code> 时，浏览器才会将响应结果传递给客户端程序。另外，<code>Access-Control-Allow-Origin</code> 必须指定请求源的域名，否则响应失败。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Access-Control-Allow-Origin: http://foo.com</div><div class="line">Access-Control-Allow-Credentials: true</div><div class="line">Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</div><div class="line">Keep-Alive: timeout=2, max=100</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Type: text/plain</div></pre></td></tr></table></figure>
<hr>
<p>参考：</p>
<ul>
<li>Mozilla Developer Network</li>
<li>阮一峰的网络日志</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Web 开发中，跨域请求是个经常碰到的问题，因为涉及到网站安全，所以浏览器是拒绝跨域请求的。通常解决跨域会采用 &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;(JSON with Padding) 和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;CORS&lt;/a&gt;(Cross-Origin Resource Sharing)。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="JavaScript" scheme="http://isudox.com/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="http://isudox.com/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Java 常用容器小结</title>
    <link href="http://isudox.com/2016/09/13/java-collections-overview/"/>
    <id>http://isudox.com/2016/09/13/java-collections-overview/</id>
    <published>2016-09-13T12:15:58.000Z</published>
    <updated>2016-09-23T13:08:16.665Z</updated>
    
    <content type="html"><![CDATA[<p>无论是什么编程语言，容器都是非常重要的概念，在 Java 的实际开发中更是无处不在，各种 List、Set、Map。很多时候就是随着编程的惯性用了 ArrayList 或者 HashMap，但是并没对其特性和适用场景作更多的思考。开发者对 Java 容器的讨论比较多，我自己从源码的角度做个粗浅的整理。</p>
<a id="more"></a>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>java.util 包中的基于 Collection 接口的有 List、Set 和 Queue，下面这张图清楚的显示了 Collection 接口的向下实现和继承关系。</p>
<p><img src="https://o70e8d1kb.qnssl.com/java-collection-hierarchy.png" alt=""></p>
<p>Collection 接口继承了 Iterable 接口，表明所有 Collection 的实现都是可迭代的。Collection 提供最基础的接口方法，如 <code>add()</code>、<code>remove()</code>、<code>contains()</code>、<code>isEmpty()</code>、<code>hashCode()</code> 等。</p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted. The user can access elements by their integer index (position in the list), and search for elements in the list.</p>
</blockquote>
<p>上面是 Java SE Docs 里对 List 的定义。也就是说，List 是一个有序的 Collection，即队列，List 的使用者通过 List 内元素所在的 index 访问元素，且不限制重复元素。</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><blockquote>
<p>Resizable-array implementation of the List interface. Implements all optional list operations, and permits all elements, including null. In addition to implementing the List interface, this class provides methods to manipulate the size of the array that is used internally to store the list. (This class is roughly equivalent to Vector, except that it is unsynchronized.)</p>
</blockquote>
<p>ArrayList 是 List 里使用度非常高的一个实现。Doc 里有这么几个关键的说明：可动态扩容，允许插入 <code>null</code>，非同步。</p>
<p>ArrayList 实例有一个容量（capacity），就是它所能存储的元素数量，默认是 10。当元素不断被添加进 ArrayList 后，它的 size 域接近 capacity 时，capacity 会自动增加。</p>
<p>先来了解 ArrayList 的自动扩容机制。自动扩容是在执行 <code>add</code> 或 <code>addAll</code> 方法是触发的，这两个方法里会调用 <code>ensureCapacityInternal()</code> 方法来增大 capacity，看源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有当新增元素后的 size 超过当前的容量时，才会触发扩容。扩容的操作由 <code>grow()</code> 通过 <code>Arrays.copyOf()</code> 完成。自动扩容省去了程序员操心 ArrayList 溢出问题，但也带来一个弊端，就是当需要添加大量元素，会频繁触发自动扩容，JDK 提供了 <code>ensureCapacity()</code> 方法手动的预先设置 capacity 去避免这种情况。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">        <span class="comment">// any size if not default element table</span></div><div class="line">        ? <span class="number">0</span></div><div class="line">        <span class="comment">// larger than default for default empty table. It's already</span></div><div class="line">        <span class="comment">// supposed to be at default size.</span></div><div class="line">        : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><blockquote>
<p>The Vector class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a Vector can grow or shrink as needed to accommodate adding and removing items after the Vector has been created.</p>
</blockquote>
<p>Vector 和 ArrayList 很类似，不同之处在于，Vector 是同步的，线程安全，自动扩容时，容量是增大 100%（ArrayList 是增大 50%）。</p>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><blockquote>
<p>Doubly-linked list implementation of the List and Deque interfaces. Implements all optional list operations, and permits all elements (including null).</p>
</blockquote>
<p>LinkedList 是一个双向链表实现，对 LinkedList 内元素的索引都需要从它的头部或尾部遍历。因此 LinkedList 不能像 ArrayList 和 Vector 那样根据元素索引位置进行随机访问，只能通过 LinkedList 里逐个 Node 依次向下（上）迭代进行查找，访问效率相比会差一点。</p>
<p>LinkedList 内元素是以 <code>Node&lt;E&gt;</code> 结构存储，Node 包含真实的存储元素 item，前一 Node 的引用 prev，后一 Node 的引用 next：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; next;</div><div class="line">    Node&lt;E&gt; prev;</div><div class="line"></div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.item = element;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">        <span class="keyword">this</span>.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>双向链表的结构使得数据的插入删除变得非常简单高效：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    checkPositionIndex(index);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (index == size)</div><div class="line">        linkLast(element);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        linkBefore(element, node(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert succ != null;</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</div><div class="line">    succ.prev = newNode;</div><div class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">        first = newNode;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        pred.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插入时，只需要将新元素的 Node 插在 prev 和 next Node之间，并重新建立前后连接关系。同理，删除操作也是。</p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><blockquote>
<p>A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element. As implied by its name, this interface models the mathematical set abstraction.</p>
</blockquote>
<p>Set 是不存在重复元素的集合类型。对于重复的定义就是，当 <code>e1.equals(e2)</code> 时，就意味着重复。Set 支持 <code>null</code>，最多也只能存在一个。</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><blockquote>
<p>This class implements the Set interface, backed by a hash table (actually a HashMap instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the null element.</p>
</blockquote>
<p>凡是和 Hash 相关的都是查询效率很高的集合类型，HashSet 也是。HashSet 内部持有一个 HashMap 域来作为元素的实际存储，也就是说，HashSet 根据元素的 HashCode 来确定顺序，因此 HashSet 无法保证元素的存储顺序和插入顺序一致，甚至都不能保证顺序一直保持不变。参考 OpenJDK 里的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E, Object&gt; map;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.isEmpty();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E var1)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.put(var1, PRESENT) == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object var1)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.map.remove(var1) == PRESENT;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.map.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><blockquote>
<p>Hash table and linked list implementation of the Set interface, with predictable iteration order.</p>
</blockquote>
<p>LinkedHashSet 继承了 HashSet，不同的是，LinkedHashSet 内部持有一个双向链表，这个链表决定了其元素遍历的顺序，即元素插入的顺序。因此 LinkedHashSet 是有序的集合。</p>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><blockquote>
<p>A NavigableSet implementation based on a TreeMap. The elements are ordered using their natural ordering, or by a Comparator provided at set creation time, depending on which constructor is used.</p>
</blockquote>
<p>TreeSet 继承 SortedSet（直接父类是 NavigableSet），是有序的集合。元素顺序可以保持自然排序，或者根据提供的比较器 Comparator 排序，因此 TreeSet 中任意两个元素的值都不同。TreeSet 的元素存储在 NavigableMap 中（父类是 SortedMap）。</p>
<p>TreeSet 是非同步的，如果多线程并行访问 TreeSet，且至少有一个线程会修改它，就必须在外部进行同步。典型的办法是采用包装器去把非同步的对象装饰成同步的对象（Java 并发编程实战里讲得很详细），Collections 包提供了这样的方法：<br><code>SortedSet set = Collections.synchronizedSortedSet(new TreeSet(...));</code></p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="https://o70e8d1kb.qnssl.com/java-map-hierarchy.png" alt=""></p>
<p>Map 存储的元素是 K-V 键值对，Map 的具体实现通常是由 key 映射到 value，而 Apache Commons 包的 BidiMap 集合，实现了 value 到 key 的反向映射，参考 <a href="http://stackoverflow.com/questions/1383797/java-hashmap-how-to-get-key-from-value" target="_blank" rel="external">StackOverflow</a>。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote>
<p>This implementation provides all of the optional map operations, and permits null values and the null key. (The HashMap class is roughly equivalent to Hashtable, except that it is unsynchronized and permits nulls.) This class makes no guarantees as to the order of the map; in particular, it does not guarantee that the order will remain constant over time.</p>
</blockquote>
<p>之前的<a href="/2016/08/08/how-hashmap-works-in-jdk8/">博客</a>对 JDK8 里的 HashMap 做了简单的介绍。HashMap 的 key 和 value 允许 null，且它是非同步的，这个 Hashtable 有别（HashMap 继承了 AbstractMap，Hashtable 继承了 Dictionary，两者都实现了 Map 接口）。HashMap 是无序的，因为它的元素通过 key 的哈希值决定其在 hash bucket 中的存储位置。</p>
<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>Hashtable 和 HashMap 类似，但它是同步的，且不支持 null。在单线程环境下，Hashtable 的性能要稍差于 HashMap。</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><blockquote>
<p>A Red-Black tree based NavigableMap implementation. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used.</p>
</blockquote>
<p>TreeMap 是基于红黑树的 NavigableMap（父类 SortedMap）实现，是有序集合，以元素 key 的自然顺序或者比较器作为排序依据。它和 TreeSet 除了元素结构的差异，在行为表现上很相似。</p>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>搬运前人总结的表格，总览几个常用集合的特点：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Collection class</th>
<th style="text-align:center">Base class</th>
<th style="text-align:center">Base interfaces</th>
<th style="text-align:center">Duplicate elements?</th>
<th style="text-align:center">Ordered?</th>
<th style="text-align:center">Sorted?</th>
<th style="text-align:center">Thread-safe?</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ArrayList<e></e></td>
<td style="text-align:center">AbstractList<e></e></td>
<td style="text-align:center">List<e></e></td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">LinkedList<e></e></td>
<td style="text-align:center">AbstractSequentialList<e></e></td>
<td style="text-align:center">List<e>; Deque<e></e></e></td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">Vector<e></e></td>
<td style="text-align:center">AbstractList<e></e></td>
<td style="text-align:center">List<e></e></td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">HashSet<e></e></td>
<td style="text-align:center">AbstractSet<e></e></td>
<td style="text-align:center">Set<e></e></td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">LinkedHashSet<e></e></td>
<td style="text-align:center">HashSet<e></e></td>
<td style="text-align:center">Set<e></e></td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">TreeSet<e></e></td>
<td style="text-align:center">AbstractSet<e></e></td>
<td style="text-align:center">NavigableSet<e></e></td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">HashMap<k, v=""></k,></td>
<td style="text-align:center">AbstractMap<k, v=""></k,></td>
<td style="text-align:center">Map<k, v=""></k,></td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">LinkedHashMap<k, v=""></k,></td>
<td style="text-align:center">HashMap<k, v=""></k,></td>
<td style="text-align:center">Map<k, v=""></k,></td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">Hashtable<k, v=""></k,></td>
<td style="text-align:center">Dictionary<k, v=""></k,></td>
<td style="text-align:center">Map<k, v=""></k,></td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">TreeMap<k, v=""></k,></td>
<td style="text-align:center">AbstractMap<k, v=""></k,></td>
<td style="text-align:center">NavigableMap<k, v=""></k,></td>
<td style="text-align:center">N</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">N</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是什么编程语言，容器都是非常重要的概念，在 Java 的实际开发中更是无处不在，各种 List、Set、Map。很多时候就是随着编程的惯性用了 ArrayList 或者 HashMap，但是并没对其特性和适用场景作更多的思考。开发者对 Java 容器的讨论比较多，我自己从源码的角度做个粗浅的整理。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Java" scheme="http://isudox.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 Python 装饰器</title>
    <link href="http://isudox.com/2016/09/09/python-decorator-guide/"/>
    <id>http://isudox.com/2016/09/09/python-decorator-guide/</id>
    <published>2016-09-09T14:42:36.000Z</published>
    <updated>2016-09-23T13:08:16.665Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇水文里记录的 Click 包，大量的运用了 Python 的装饰器。装饰器是非常实用的编程思想，Java 开发里经常看到的 AOP 也是同样的思想。Python 装饰器使用很简单，只需要在需要装饰的方法前加上注解 <code>@decorator</code> 函数进行包裹。但是经常用不代表能理解到位，下文就来尝试捋一捋 Python 装饰器的来龙去脉。</p>
<a id="more"></a>
<h3 id="管窥装饰器"><a href="#管窥装饰器" class="headerlink" title="管窥装饰器"></a>管窥装饰器</h3><p>下面是一个很简单的 Python 方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'call me'</span>)</div><div class="line"></div><div class="line">call()</div></pre></td></tr></table></figure>
<p>很简单，这会得到 “call me” 的文本输出。现在增加一个时间标记，告知是什么时间呼叫的我，可以这么改：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'call me'</span>)</div><div class="line">    print(<span class="string">'at '</span>, time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(time.time()))))</div><div class="line">          </div><div class="line">call()</div></pre></td></tr></table></figure>
<p>这么做有一个麻烦的地方，就是在 <code>call()</code> 方法内部做了改动。在很多场景下，我们不希望去改变方法本身的行为，因为这个方法可能在很多地方都被调用了，如果在方法内部做了修改，那么对每个调用都会产生影响，但我们只希望在某些调用时才去改变它的行为。比较常见的实用场景如用户登录拦截。</p>
<p>不改变函数本身，那么该如何对 <code>call()</code> 加上时间标记呢？这就到装饰器大显身手的时候了。装饰器可以把被装饰的方法包裹起来，被装饰者本身的行为不会变，装饰器只是在它之外添加了额外的功能。下面这张图解释的很形象：</p>
<p><img src="https://o70e8d1kb.qnssl.com/qxf2-gun-decorator1.jpg" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'call me '</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_time</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        func()</div><div class="line">        print(<span class="string">'at'</span>,</div><div class="line">              time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(time.time())))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"></div><div class="line">call = mark_time(call)</div><div class="line">call()</div></pre></td></tr></table></figure>
<p>上面就实现了简朴的装饰器，Python 内置了对装饰器的语法支持，可以更便捷的实现装饰功能，就是上面提到的 <code>@decorator</code>，这相当于是 <code>func = decorator(func)</code> 的作用。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_time</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        func()</div><div class="line">        print(<span class="string">'at'</span>,</div><div class="line">              time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(time.time())))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@mark_time</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'call me '</span>)</div><div class="line"></div><div class="line">call()</div></pre></td></tr></table></figure>
<p>可以看出，<code>@mark_time</code> 的作用等同于 <code>call = mark_time(call)</code>，得到一个可调用的函数名。</p>
<p>如果需要多个装饰器来实现功能，只需要按顺序对方法进行装饰，装饰的顺序是从下到上：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@f1(arg)</span></div><div class="line"><span class="meta">@f2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line">foo()</div></pre></td></tr></table></figure>
<p>等效于执行 <code>f1(arg)(f2(foo))()</code></p>
<h3 id="认识函数"><a href="#认识函数" class="headerlink" title="认识函数"></a>认识函数</h3><p>了解装饰器的基础用法只是皮毛，深入理解装饰器前，得先理解函数究竟是什么。</p>
<p>首先明确一点，在 Python 中，函数 function 也是一种对象 Object。这就意味着：</p>
<ul>
<li>函数可以被指派为参数（作为传入或返回值）；</li>
<li>函数可以被定义在函数体中；</li>
</ul>
<p>因此，函数的返回值可以是另一个函数。手写一段示例代码来印证这一点：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_drink</span><span class="params">(choice=<span class="string">'tea'</span>)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_tea</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Green tea'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_coffee</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Coffee latte'</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> choice == <span class="string">'tea'</span>:</div><div class="line">        <span class="keyword">return</span> serve_tea</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> serve_coffee</div><div class="line"></div><div class="line">my_drink = get_drink()</div><div class="line"></div><div class="line">print(my_drink)  <span class="comment"># &lt;function get_drink.&lt;locals&gt;.serve_tea at 0x7f313f307f28&gt;</span></div><div class="line"></div><div class="line">print(my_drink())  <span class="comment"># Green tea</span></div><div class="line"></div><div class="line">print(get_drink(<span class="string">'coffee'</span>)())  <span class="comment"># Coffee latte</span></div></pre></td></tr></table></figure>
<p>这样之前写的装饰器函数返回的 <code>wrapper</code> 就不难明白了。装饰器的本质就是实现了在被装饰的方法执行之前/之后，执行装饰的动作。</p>
<h3 id="带参装饰器"><a href="#带参装饰器" class="headerlink" title="带参装饰器"></a>带参装饰器</h3><p>假设有这么个需求，在前面的 <code>call()</code> 方法之前加上主语，实现 “{who} calls me at {time}”，可以考虑给装饰器函数本身传递一个入参 {who}。<br>已有的装饰器是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call = mark_time(call)</div><div class="line">call()</div></pre></td></tr></table></figure>
<p>增加入参的装饰器是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">call = mark_time(<span class="string">'sudoz'</span>)(call)</div><div class="line">call()</div></pre></td></tr></table></figure>
<p>拆开来看上面的代码：先执行 <code>mark_time(&#39;sudoz&#39;)</code> 返回一个回调函数 wrapper_1（假设是这个函数名），然后执行 <code>wrapper_1(call)</code>，得到另一个回调函数 wrapper_2，<code>call()</code> 实际上运行的是 <code>wrapper_2()</code>。这么拆解开来，就很好实现带参的装饰器方法了，就是相比不带参的装饰器外面多套一层以返回 wrapper_1：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_time</span><span class="params">(who)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_1</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper_2</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            print(<span class="string">'%s'</span> % who)</div><div class="line">            func()</div><div class="line">            print(<span class="string">'at'</span>,</div><div class="line">                  time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(time.time())))</div><div class="line">        <span class="keyword">return</span> wrapper_2</div><div class="line">    <span class="keyword">return</span> wrapper_1</div><div class="line"></div><div class="line"><span class="meta">@mark_time('sudoz')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'call me '</span>)</div><div class="line"></div><div class="line">call()</div></pre></td></tr></table></figure>
<h3 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h3><p>Python 类有 3 个内置的装饰器：<code>@staticmethod</code>，<code>@classmethod</code>，<code>property</code>——</p>
<ul>
<li><code>@staticmethod</code> 装饰的方法是类的静态方法，即无需通过类的实例去调用，因此方法的参数中没有类实例 <code>self</code>；</li>
<li><code>@classmethod</code> 装饰的方法是类方法，方法的第一个参数是类对象 <code>cls</code>，可以在方法内调用类对象本身；</li>
<li><code>@property</code> 装饰的方法是类的属性，装饰器内部定义了 <code>getter</code> 和 <code>setter</code> 方法，这种方式和 Java 里的 <code>getXXX</code>、<code>setXXX</code> 非常相像；</li>
</ul>
<p>代码演示下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, city)</span>:</span></div><div class="line">        self._name = name</div><div class="line">        self._city = city</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_static_method</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'nothing to do.'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_class_method</span><span class="params">(cls)</span>:</span></div><div class="line">        print(cls.__name__)</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._name</div><div class="line"></div><div class="line"><span class="meta">    @name.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, name)</span>:</span></div><div class="line">        self._name = name</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">city</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._city</div><div class="line"></div><div class="line"></div><div class="line">demo = Demo(<span class="string">'sudoz'</span>, <span class="string">'beijing'</span>)</div><div class="line">Demo.test_static_method()  <span class="comment"># nothing to do</span></div><div class="line">demo.test_static_method()  <span class="comment"># nothing to do</span></div><div class="line">demo.test_class_method()   <span class="comment"># Demo</span></div><div class="line">print(demo.name)           <span class="comment"># sudoz beijing</span></div><div class="line">demo.name = <span class="string">'anonymous'</span></div><div class="line">print(demo.name)           <span class="comment"># anonymous</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    demo.city = <span class="string">'hangzhou'</span></div><div class="line">    print(demo.city)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    print(e)              <span class="comment"># can't set attribute</span></div></pre></td></tr></table></figure>
<p>注意上面的代码，如果被 <code>@property</code> 装饰的属性没有设置 <code>setter</code> 方法，那么该属性就是类的只读属性，不能被修改，因此上面试图修改 city 属性，抛出异常。</p>
<h3 id="functools-进阶"><a href="#functools-进阶" class="headerlink" title="functools 进阶"></a>functools 进阶</h3><p>装饰器在执行时，有一个隐蔽的小动作可能会被忽略：它把被装饰的函数的 <code>__name__</code> 属性给置换成回调函数的属性了。测试下上面代码里被装饰后的 <code>call</code> 的 <code>__name__</code> 属性，不再是 “call” 而是 “wrapper_2”。Python 2.5 版本新增的 <code>functools.wraps()</code> 解决了这个问题，它会把被装饰方法的名称，模块复制到装饰器内。而<code>functools.wraps()</code> 本身也是一个装饰器。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foobar</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        print(<span class="string">'foo'</span>)</div><div class="line">        <span class="keyword">return</span> func(args)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@foobar</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">    print(<span class="string">'Hello %s'</span> % args[<span class="number">0</span>])</div><div class="line"></div><div class="line"></div><div class="line">print(say_hello.__name__)  <span class="comment"># Output: bar</span></div><div class="line"></div><div class="line">say_hello(<span class="string">'sudoz'</span>)  <span class="comment"># Output: Hello sudoz</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇水文里记录的 Click 包，大量的运用了 Python 的装饰器。装饰器是非常实用的编程思想，Java 开发里经常看到的 AOP 也是同样的思想。Python 装饰器使用很简单，只需要在需要装饰的方法前加上注解 &lt;code&gt;@decorator&lt;/code&gt; 函数进行包裹。但是经常用不代表能理解到位，下文就来尝试捋一捋 Python 装饰器的来龙去脉。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Python" scheme="http://isudox.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Click 学习笔记</title>
    <link href="http://isudox.com/2016/09/03/learning-python-package-click/"/>
    <id>http://isudox.com/2016/09/03/learning-python-package-click/</id>
    <published>2016-09-02T17:22:37.000Z</published>
    <updated>2016-09-09T15:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pypi.python.org/pypi/click" target="_blank" rel="external">Click</a> 是 Flask 的团队 pallets 开发的优秀开源项目，它为命令行工具的开发封装了大量方法，使开发者只需要专注于功能实现。恰好我最近在开发的一个小工具需要在命令行环境下操作，就写个学习笔记。</p>
<a id="more"></a>
<p>国际惯例，先来一段 “Hello World” 程序（假定已经安装了 Click 包）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hello.py</span></div><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', default=1, help='Number of greetings.')</span></div><div class="line"><span class="meta">@click.option('--name', prompt='Your name',</span></div><div class="line">              help=<span class="string">'The person to greet.'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count, name)</span>:</span></div><div class="line">    <span class="string">"""Simple program that greets NAME for a total of COUNT times."""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure>
<p>执行 <code>python hello.py --count=3</code>，不难猜到控制台的输出结果。除此之外，Click 还悄悄地做了其他的工作，比如帮助选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ python hello.py --help</div><div class="line">Usage: hello.py [OPTIONS]</div><div class="line"></div><div class="line">  Simple program that greets NAME for a total of COUNT times.</div><div class="line"></div><div class="line">Options:</div><div class="line">  --count INTEGER  Number of greetings.</div><div class="line">  --name TEXT      The person to greet.</div><div class="line">  --help           Show this message and exit.</div></pre></td></tr></table></figure>
<h3 id="函数秒变-CLI"><a href="#函数秒变-CLI" class="headerlink" title="函数秒变 CLI"></a>函数秒变 CLI</h3><p>从上面的 “Hello World” 演示中可以看出，Click 是通过装饰器来把一个函数方法装饰成命令行接口的，这个装饰器方法就是 <code>@click.command()</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Hello World!'</span>)</div></pre></td></tr></table></figure>
<p><code>@click.command()</code> 装饰器把 <code>hello()</code> 方法变成了 <code>Command</code> 对象，当它被调用时，就会执行该实例内的行为。而 <code>--help</code> 参数就是 <code>Command</code> 对象内置的参数。</p>
<p>不同的 <code>Command</code> 实例可以关联到 <code>group</code> 中。<code>group</code> 下绑定的命令就成为了它的子命令，参考下面的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Initialized the database'</span>)</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Dropped the database'</span>)</div><div class="line"></div><div class="line">cli.add_command(initdb)</div><div class="line">cli.add_command(dropdb)</div></pre></td></tr></table></figure>
<p><code>@click.group</code> 装饰器把方法装饰为可以拥有多个子命令的 <code>Group</code> 对象。由 <code>Group.add_command()</code> 方法把 <code>Command</code> 对象关联到 <code>Group</code> 对象。<br>也可以直接用 <code>@Group.command</code> 装饰方法，会自动把方法关联到该 <code>Group</code> 对象下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">@cli.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Initialized the database'</span>)</div><div class="line"></div><div class="line"><span class="meta">@cli.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Dropped the database'</span>)</div></pre></td></tr></table></figure>
<p>命令行的参数是不可或缺的，Click 支持对 <code>command</code> 方法添加自定义的参数，由 <code>option()</code> 和 <code>argument()</code> 装饰器实现。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', default=1, help='number of greetings')</span></div><div class="line"><span class="meta">@click.argument('name')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count, name)</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div></pre></td></tr></table></figure>
<h3 id="打包跨平台可执行程序"><a href="#打包跨平台可执行程序" class="headerlink" title="打包跨平台可执行程序"></a>打包跨平台可执行程序</h3><p>通过 Click 编写了简单的命令行方法后，还需要把 <code>.py</code> 文件转换成可以在控制台里运行的命令行程序。最简单的办法就是在文件末尾加上如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    command()</div></pre></td></tr></table></figure>
<p>Click 支持使用 <code>setuptools</code> 来更好的实现命令行程序打包，把源码文件打包成系统中的可执行程序，并且不限平台。一般我们会在源码根目录下创建 <code>setup.py</code> 脚本，先看一段简单的打包代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</div><div class="line"></div><div class="line">setup(</div><div class="line">    name=<span class="string">'hello'</span>,</div><div class="line">    version=<span class="string">'0.1'</span>,</div><div class="line">    py_modules=[<span class="string">'hello'</span>],</div><div class="line">    install_requires=[</div><div class="line">        <span class="string">'Click'</span>,</div><div class="line">    ],</div><div class="line">    entry_points=<span class="string">'''</span></div><div class="line">        [console_scripts]</div><div class="line">        hello=hello:cli</div><div class="line">    ''',</div><div class="line">)</div></pre></td></tr></table></figure>
<p>留意 <code>entry_points</code> 字段，在 <code>console_scripts</code> 下，每一行都是一个控制台脚本，等号左边的的是脚本的名称，右边的是 Click 命令的导入路径。</p>
<h3 id="详解命令行参数"><a href="#详解命令行参数" class="headerlink" title="详解命令行参数"></a>详解命令行参数</h3><p>上面提到了自定义命令行参数的两个装饰器：<code>@click.option()</code> 和 <code>@click.argument()</code>，两者有些许区别，使用场景也有所不同。</p>
<p>总体而言，<code>argument()</code> 装饰器比 <code>option()</code> 功能简单些，后者支持下面的特性：</p>
<ul>
<li>自动提示缺失的输入；</li>
<li>option 参数可以从环境变量中获取，argument 参数则不行；</li>
<li>option 参数在 help 输出中有完整的文档，argument 则没有；</li>
</ul>
<p>而 argument 参数可以接受可变个数的参数值，而 option 参数只能接收固定个数的参数值（默认是 1 个）。</p>
<p>Click 可以设置不同的参数类型，简单类型如 <code>click.STRING</code>，<code>click.INT</code>，<code>click.FLOAT</code>，<code>click.BOOL</code>。</p>
<p>命令行的参数名由 “-short_name” 和 “–long_name” 声明，如果参数名既没有以 “-“ 开头，也没有以 “–” 开头，那么这边变量名会成为被装饰方法的内部变量，而非方法参数。</p>
<h4 id="Option-参数"><a href="#Option-参数" class="headerlink" title="Option 参数"></a>Option 参数</h4><p>option 最基础的用法就是简单值变量，option 接收一个变量值，下面是一段示例代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--n', default=1)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dots</span><span class="params">(n)</span>:</span></div><div class="line">    click.echo(<span class="string">'.'</span> * n)</div></pre></td></tr></table></figure>
<p>如果在命令行后面跟随参数 <code>--n=2</code> 就会输出两个点，如果传参数，默认输出一个点。上面的代码中，参数类型没有显示给出，但解释器会认为是 <code>INT</code> 型，因为默认值 1 是 int 值。<br>有些时候需要传入多个值，可以理解为一个 list，option 只支持固定长度的参数值，即设置后必须传入，个数由 <code>nargs</code> 确定。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--pos', nargs=2, type=float)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findme</span><span class="params">(pos)</span>:</span></div><div class="line">    click.echo(<span class="string">'%s / %s'</span> % pos)</div></pre></td></tr></table></figure>
<p><code>findme --pos 2.0 3.0</code> 输出结果就是 2.0 / 3.0</p>
<p>既然可以传入 list，那么 tuple 呢？Click 也是支持的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--item', type=(unicode, int))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">putitem</span><span class="params">(item)</span>:</span></div><div class="line">    click.echo(<span class="string">'name=%s id=%d'</span> % item)</div></pre></td></tr></table></figure>
<p>这样就传入了一个 tuple 变量，<code>putitem --item peter 1338</code> 得到的输出就是 name=peter id=1338<br>上面没有设置 nargs，因为 nargs 会自动取 tuple 的长度值。因此上面的代码实际上等同于：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--item', nargs=2, type=click.Tuple([unicode, int]))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">putitem</span><span class="params">(item)</span>:</span></div><div class="line">    click.echo(<span class="string">'name=%s id=%d'</span> % item)</div></pre></td></tr></table></figure>
<p>option 还支持同一个参数多次使用，类似 <code>git commit -m aa -m bb</code> 中 <code>-m</code> 参数就传入了 2 次。option 通过 <code>multiple</code> 标识位来支持这一特性：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--message', '-m', multiple=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(message)</span>:</span></div><div class="line">    click.echo(<span class="string">'\n'</span>.join(message))</div></pre></td></tr></table></figure>
<p>有时候，命令行参数是固定的几个值，这时就可以用到 <code>Click.choice</code> 类型来限定传参的潜在值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># choice</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--hash-type', type=click.Choice(['md5', 'sha1']))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">digest</span><span class="params">(hash_type)</span>:</span></div><div class="line">    click.echo(hash_type)</div></pre></td></tr></table></figure>
<p>当上面的命令行程序参数 <code>--hash-type</code> 不是 md5 或 sha1，就会输出错误提示，并且在 <code>--help</code> 提示中也会对 choice 选项有显示。</p>
<p>如果希望命令行程序能在我们错误输入或漏掉输入的情况下，友好的提示用户，就需要用到 Click 的 prompt 功能，看代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># prompt</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--name', prompt=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></div><div class="line">    click.echo(<span class="string">'Hello %s!'</span> % name)</div></pre></td></tr></table></figure>
<p>如果在执行 hello 时没有提供 –name 参数，控制台会提示用户输入该参数。也可以自定义控制台的提示输出，把 <code>prompt</code> 改为自定义内容即可。</p>
<p>对于类似账户密码等参数的输入，就要进行隐藏显示。<code>option</code> 的 <code>hide_input</code> 和 <code>confirmation_promt</code> 标识就是用来控制密码参数的输入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># password</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--password', prompt=True, hide_input=True,</span></div><div class="line">              confirmation_prompt=<span class="keyword">True</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(password)</span>:</span></div><div class="line">    click.echo(<span class="string">'Encrypting password to %s'</span> % password.encode(<span class="string">'rot13'</span>))</div></pre></td></tr></table></figure>
<p>Click 把上面的操作进一步封装成装饰器 <code>click.password_option()</code>，因此上面的代码也可以简化成：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># password</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.password_option()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(password)</span>:</span></div><div class="line">    click.echo(<span class="string">'Encrypting password to %s'</span> % password.encode(<span class="string">'rot13'</span>))</div></pre></td></tr></table></figure>
<p>有的参数会改变命令行程序的执行，比如 <code>node</code> 是进入 Node 控制台，而 <code>node --verion</code> 是输出 node 的版本号。Click 提供 eager 标识对参数名进行标记，拦截既定的命令行执行流程，而是调用一个回调方法，执行后直接退出。下面模拟 <code>click.version_option()</code> 的功能，实现 <code>--version</code> 参数名输出版本号：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># eager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_version</span><span class="params">(ctx, param, value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value <span class="keyword">or</span> ctx.resilient_parsing:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    click.echo(<span class="string">'Version 1.0'</span>)</div><div class="line">    ctx.exit()</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--version', is_flag=True, callback=print_version,</span></div><div class="line">              expose_value=<span class="keyword">False</span>, is_eager=<span class="keyword">True</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Hello World!'</span>)</div></pre></td></tr></table></figure>
<p>对于类似删除数据库表这样的危险操作，Click 支持弹出确认提示，<code>--yes</code> 标识位置为 True 时会让用户再次确认：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># yes parameters</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abort_if_false</span><span class="params">(ctx, param, value)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value:</div><div class="line">        ctx.abort()</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--yes', is_flag=True, callback=abort_if_false,</span></div><div class="line">              expose_value=<span class="keyword">False</span>,</div><div class="line">              prompt=<span class="string">'Are you sure you want to drop the db?'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Dropped all tables!'</span>)</div></pre></td></tr></table></figure>
<p>测试运行下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ dropdb</div><div class="line">Are you sure you want to drop the db? [y/N]: n</div><div class="line">Aborted!</div><div class="line">$ dropdb --yes</div><div class="line">Dropped all tables!</div></pre></td></tr></table></figure>
<p>同样的，Click 对次进行了封装，<code>click.confirmation_option()</code> 装饰器实现了上述功能：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.confirmation_option(prompt='Are you sure you want to drop the db?')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Dropped all tables!'</span>)</div></pre></td></tr></table></figure>
<p>前面只讲了默认的参数前缀 <code>--</code> 和 <code>-</code>，Click 允许开发者自定义参数前缀（虽然严重不推荐）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># other prefix</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('+w/-w')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">chmod</span><span class="params">(w)</span>:</span></div><div class="line">    click.echo(<span class="string">'writable=%s'</span> % w)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    chmod()</div></pre></td></tr></table></figure>
<p>如果想要用 <code>/</code> 作为前缀，而且要像上面一样采用布尔标识，会产生冲突，因为布尔标识也是用 <code>/</code>，这种情况下可以用 <code>;</code> 代替布尔标识的 <code>/</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('/debug;/no-debug')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(debug)</span>:</span></div><div class="line">    click.echo(<span class="string">'debug=%s'</span> % debug)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    log()</div></pre></td></tr></table></figure>
<p>既然支持 Choice，不难联想到 Range，先看代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># range</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', type=click.IntRange(0, 20, clamp=True))</span></div><div class="line"><span class="meta">@click.option('--digit', type=click.IntRange(0, 10))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(count, digit)</span>:</span></div><div class="line">    click.echo(str(digit) * count)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    repeat()</div></pre></td></tr></table></figure>
<h4 id="Argument-参数"><a href="#Argument-参数" class="headerlink" title="Argument 参数"></a>Argument 参数</h4><p>Argument 的作用类似 Option，但没有 Option 那么全面的功能。</p>
<p>和 Option 一样，Argument 最基础的应用就是传递一个简单变量值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('filename')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch</span><span class="params">(filename)</span>:</span></div><div class="line">    click.echo(filename)</div></pre></td></tr></table></figure>
<p>命令行后跟的参数值被赋值给参数名 <code>filename</code>。</p>
<p>另一个用的比较广泛的是可变参数，也是由 <code>nargs</code> 来确定参数个数，变量值会以 tuple 的形式传入函数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('src', nargs=-1)</span></div><div class="line"><span class="meta">@click.argument('dst', nargs=1)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(src, dst)</span>:</span></div><div class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> src:</div><div class="line">        click.echo(<span class="string">'move %s to folder %s'</span> % (fn, dst))</div></pre></td></tr></table></figure>
<p>运行程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ copy foo.txt bar.txt my_folder</div><div class="line">move foo.txt to folder my_folder</div><div class="line">move bar.txt to folder my_folder</div></pre></td></tr></table></figure>
<p>Click 支持通过文件名参数对文件进行操作，<code>click.File()</code> 装饰器就是处理这种操作的，尤其是在类 Unix 系统下，它支持以 <code>-</code> 符号作为标准输入/输出。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># File</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('input', type=click.File('rb'))</span></div><div class="line"><span class="meta">@click.argument('output', type=click.File('wb'))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inout</span><span class="params">(input, output)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        chunk = input.read(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        output.write(chunk)</div></pre></td></tr></table></figure>
<p>运行程序，先将文本写进文件，再读取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ inout - hello.txt</div><div class="line">hello</div><div class="line">^D</div><div class="line">$ inout hello.txt -</div><div class="line">hello</div></pre></td></tr></table></figure>
<p>如果参数值只是想做为文件名而已呢，很简单，将 <code>type</code> 指定为 <code>click.Path()</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('f', type=click.Path(exists=True))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch</span><span class="params">(f)</span>:</span></div><div class="line">    click.echo(click.format_filename(f))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ touch hello.txt</div><div class="line">hello.txt</div><div class="line"></div><div class="line">$ touch missing.txt</div><div class="line">Usage: touch [OPTIONS] F</div><div class="line"></div><div class="line">Error: Invalid value for &quot;f&quot;: Path &quot;missing.txt&quot; does not exist.</div></pre></td></tr></table></figure>
<h3 id="命令组"><a href="#命令组" class="headerlink" title="命令组"></a>命令组</h3><h3 id="仿-Hexo-示例程序"><a href="#仿-Hexo-示例程序" class="headerlink" title="仿 Hexo 示例程序"></a>仿 Hexo 示例程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hexo.py</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/click&quot;&gt;Click&lt;/a&gt; 是 Flask 的团队 pallets 开发的优秀开源项目，它为命令行工具的开发封装了大量方法，使开发者只需要专注于功能实现。恰好我最近在开发的一个小工具需要在命令行环境下操作，就写个学习笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Python" scheme="http://isudox.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Gunicorn 驱动工厂模式 Flask 应用</title>
    <link href="http://isudox.com/2016/08/29/running-flask-with-gunicorn-in-application-factory/"/>
    <id>http://isudox.com/2016/08/29/running-flask-with-gunicorn-in-application-factory/</id>
    <published>2016-08-29T05:45:50.000Z</published>
    <updated>2016-09-05T14:37:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前用 uWsgi 部署过 Django 应用，但当时的开发和部署都还手生，有很多不合理的地方，最近写的一个 Flask 应用，用了另一个 wsgi 容器 —— <a href="http://gunicorn.org/" target="_blank" rel="external">Gunicorn</a>，并且利用工厂模式对不同开发环境进行了隔离。工厂模式下的 Flask 应用在用 Gunicorn 部署时，需要做一点针对性的改动。</p>
<a id="more"></a>
<h3 id="基础的-Flask-应用部署"><a href="#基础的-Flask-应用部署" class="headerlink" title="基础的 Flask 应用部署"></a>基础的 Flask 应用部署</h3><p>先写一个最简单的 Flask 应用 hello：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hello.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello World!"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure>
<p>然后用 Python 去解释执行这段脚本即可，Flask 内置了简易的 HTTP Server 来处理请求。</p>
<p>当然这仅仅供本地测试的运行方式，线上部署的方案，通常是采用 wsgi 程序来驱动 Flask / Django 应用。Gunicorn 是性能比较好的一个方案（有时间我会做一次 Gunicorn 与 uWsgi 的性能压测对比）。Gunicorn 的驱动 hello 应用的命令如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunicorn -w <span class="number">4</span> -b <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span> hello:app</div></pre></td></tr></table></figure>
<p>Gunicorn 的常用运行参数说明：</p>
<ul>
<li>-w  WORKERS, –workers: worker 进程的数量，通常每个 CPU 内核运行 2-4 个 worker 进程。</li>
<li>-b  BIND, –bind: 指定要绑定的服务器端口号或 socket</li>
<li>-c  CONFIG, –config: 指定 config 文件</li>
<li>-k  WORKERCLASS, –worker-class: worker 进程的类型，如 sync, eventlet, gevent, 默认为 sync</li>
<li>-n  APP_NAME, –name: 指定 Gunicorn 进程在进程查看列表里的显示名（比如 ps 和 htop 命令查看）</li>
</ul>
<p>真正部署到生产环境，一般不会用 Gunicorn 直接处理客户端的 HTTP 请求，而是用类似 Nginx 来做代理，将请求代理到 Gunicorn，再由 Flask 程序进行处理，返回结果。配置 Nginx 如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line"></div><div class="line">    server_name _;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log;</div><div class="line">    error_log  /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass         http://127.0.0.1:5000/;</div><div class="line">        proxy_redirect     off;</div><div class="line"></div><div class="line">        proxy_set_header   Host                 $host;</div><div class="line">        proxy_set_header   X-Real-IP            $remote_addr;</div><div class="line">        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header   X-Forwarded-Proto    $scheme;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就实现了 Client &lt;-&gt; Nginx &lt;-&gt; Server port / socket &lt;-&gt; Gunicorn &lt;-&gt; Flask 整个请求响应链路。</p>
<h3 id="工厂模式的部署"><a href="#工厂模式的部署" class="headerlink" title="工厂模式的部署"></a>工厂模式的部署</h3><p>上面给了最简单的应用部署方案，学习练手没问题，实际开发部署就得多考虑一些问题。一个主要的问题就是多环境配置，这个在上一篇关于 Django 非最佳实践里涉及到了，但是当时的方案很挫，只是通过配置文件的替换来解决。利用工厂模式来解决这个问题是更正确合理的方法。</p>
<p>先把上面的 hello 程序做的再复杂一点，把 Flask 的 <a href="http://flask.pocoo.org/docs/0.11/blueprints/#blueprints" target="_blank" rel="external">Blueprints</a> 集成进来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># blueprint.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, abort</div><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> TemplateNotFound</div><div class="line"></div><div class="line">simple_page = Blueprint(<span class="string">'simple_page'</span>, __name__, template_folder=<span class="string">'templates'</span>,</div><div class="line">                        static_folder=<span class="string">'static'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@simple_page.route('/', defaults=&#123;'page': 'index'&#125;)</span></div><div class="line"><span class="meta">@simple_page.route('/&lt;page&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(page)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> render_template(<span class="string">'pages/$s.html'</span> % page)</div><div class="line">    <span class="keyword">except</span> TemplateNotFound:</div><div class="line">        abort(<span class="number">404</span>)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hello.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"><span class="keyword">from</span> blueprint <span class="keyword">import</span> simple_page</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.register_blueprint(simple_page)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure>
<p>Flask 的 Blueprints 有很强大的功能，当项目变的比较大型时尤为重要，这里不作展开。上面的代码是通用的一种简单开发模式，就是在创建应用实例时将 Blueprints 注册进来。工厂模式并不是这么处理，相比这种简单模式，工厂模式会把 app 的创建转移到一个专门的方法中，就是所谓的工厂，然后根据要生产的产品类型，创建不同的实例。<br>这样处理的好处是显而易见的——</p>
<ul>
<li>便于测试。测试环境的配置往往和生产环境不同，这样就能运行不同环境配置的应用实例；</li>
<li>多实例。通过工厂模式，可以实现在同一个应用进程下，运行多个实例；</li>
</ul>
<p>创建工厂：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># manage.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">(config_filename)</span>:</span></div><div class="line">    app = Flask(__name__)</div><div class="line">    app.config.from_pyfile(config_filename)</div><div class="line"></div><div class="line">    <span class="keyword">from</span> blueprint <span class="keyword">import</span> simple_page</div><div class="line">    app.register_blueprint(simple_page)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> app</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> manage <span class="keyword">import</span> create_app</div><div class="line"></div><div class="line">app = create_app(<span class="string">'config.py'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</div></pre></td></tr></table></figure>
<p>根据传入的不同 config，创建不通的 app 实例。创建工厂后，有一点需要留意，就是在 Blueprints 内没法访问 app 对象实例了，因为当 Blueprints 注册时 app 对实例尚未被创建，但也有解决办法，就是通过 Flask 的 current_app：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># blueprints.py</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, render_template, abort, current_app</div><div class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> TemplateNotFound</div><div class="line"></div><div class="line">simple_page = Blueprint(<span class="string">'simple_page'</span>, __name__, template_folder=<span class="string">'templates'</span>,</div><div class="line">                        static_folder=<span class="string">'static'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@simple_page.route('/', defaults=&#123;'page': 'index'&#125;)</span></div><div class="line"><span class="meta">@simple_page.route('/&lt;page&gt;')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(page)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">return</span> render_template(current_app.config[<span class="string">'INDEX_TEMPLATE'</span>])</div><div class="line">    <span class="keyword">except</span> TemplateNotFound:</div><div class="line">        abort(<span class="number">404</span>)</div></pre></td></tr></table></figure>
<p>在实现基本的工厂模式后，再回来对 Gunicorn 和 Nginx 进行配置。上面用的是 Server Port，接下来就改为 socket。<br>Nginx conf 配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line"></div><div class="line">    server_name _;</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log;</div><div class="line">    error_log  /var/log/nginx/error.log;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass         http://unix:/path/to/project.sock;</div><div class="line">        proxy_redirect     off;</div><div class="line"></div><div class="line">        proxy_set_header   Host                 $host;</div><div class="line">        proxy_set_header   X-Real-IP            $remote_addr;</div><div class="line">        proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header   X-Forwarded-Proto    $scheme;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的 proxy_pass 参数也可以使用 upstream 来作反向代理，作用是一样的。然后 Gunicorn 运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gunicorn -w 4 -b unix:/path/to/project.sock hello:app</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前用 uWsgi 部署过 Django 应用，但当时的开发和部署都还手生，有很多不合理的地方，最近写的一个 Flask 应用，用了另一个 wsgi 容器 —— &lt;a href=&quot;http://gunicorn.org/&quot;&gt;Gunicorn&lt;/a&gt;，并且利用工厂模式对不同开发环境进行了隔离。工厂模式下的 Flask 应用在用 Gunicorn 部署时，需要做一点针对性的改动。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://isudox.com/categories/DevOps/"/>
    
    
      <category term="Python" scheme="http://isudox.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://isudox.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>JDK 8 中 HashMap 的工作原理</title>
    <link href="http://isudox.com/2016/08/08/how-hashmap-works-in-jdk8/"/>
    <id>http://isudox.com/2016/08/08/how-hashmap-works-in-jdk8/</id>
    <published>2016-08-08T09:31:32.000Z</published>
    <updated>2016-09-30T14:23:21.929Z</updated>
    
    <content type="html"><![CDATA[<p>Java 容器类中，<code>HashMap</code> 是一个绕不开的重点，无论是实际开发还是求职面试。由于对 JDK 6 下 <code>HashMap</code> 的讨论已经很多了，而且 JDK 8 对 <code>HashMap</code> 做了比较大的改进，本文仅对 <strong>JDK 8</strong> 中 HashMap 的实现和工作原理做一点粗浅的讨论。</p>
<a id="more"></a>
<blockquote>
<p>文中 Java 代码均基于 <strong>OpenJDK 8</strong></p>
</blockquote>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>为了便于切入话题，先写一段最简单的 HashMap 样例代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        map.put(<span class="string">"China"</span>, <span class="string">"Beijing"</span>);</div><div class="line">        map.put(<span class="string">"Japan"</span>, <span class="string">"Tokyo"</span>);</div><div class="line">        map.put(<span class="string">"Korea"</span>, <span class="string">"Seoul"</span>);</div><div class="line">        <span class="keyword">for</span> (String country : map.keySet()) &#123;  <span class="comment">// set a break point</span></div><div class="line">            String capital = map.get(country);</div><div class="line">            System.out.println(country + <span class="string">"--"</span> + capital);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>for</code> 循环处进入断点，查看变量，IntelliJ IDEA 中显示如下：<br><img src="https://o70e8d1kb.qnssl.com/hashmap-breakpoint.png" alt=""></p>
<p>变量 <code>map</code> 包含 <code>table</code> 属性和 <code>entrySet</code> 属性。其中，<code>table</code> 属性是一个长度为 16 的 <code>Map.Entry</code> 数组；<code>entrySet</code> 属性是一个元素类型为 <code>Map.Entry</code> 的 <code>Set</code> 对象。打开 JDK 8 的 <code>java.util.HashMap</code> 源码，对其属性一探究竟。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* ---------------- Fields -------------- */</span></div><div class="line"></div><div class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line"></div><div class="line">    <span class="comment">/* ---------------- Public operations -------------- */</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</div><div class="line">        Set&lt;K&gt; ks;</div><div class="line">        <span class="keyword">return</span> (ks = keySet) == <span class="keyword">null</span> ? (keySet = <span class="keyword">new</span> KeySet()) : ks;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</div><div class="line">        Collection&lt;V&gt; vs;</div><div class="line">        <span class="keyword">return</span> (vs = values) == <span class="keyword">null</span> ? (values = <span class="keyword">new</span> Values()) : vs;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从截取的源码里，可以理解上面断点执行的 <code>map</code> 各属性具体的含义：</p>
<ul>
<li><code>table</code>： 即 hash bucket 数组，存储 Node 单向链表。</li>
<li><code>entrySet</code>： 存储 Entry 的 Set；</li>
<li><code>size</code>： <code>map</code> 中键值对的数量；</li>
<li><code>modCount</code>： 记录当前 <code>HashMap</code> 结构被改变的次数；</li>
<li><code>threshold</code>： 所能容纳的键值对的最大值</li>
<li><code>loadFactor</code>： 当前 <code>table</code> 的负载因子，当 <code>table</code> 中 entries 的数量超过负载时，会被重新 hash，table 的容量会增大为先前的 2 倍。默认初始容量为 16，负载因子为 0.75；</li>
<li><code>keySet()</code>: 返回当前 <code>map</code> 中 key 组成的 Set；</li>
<li><code>values()</code>: 返回当前 <code>map</code> 中 value 组成的 Collection；</li>
</ul>
<p>这样还是不够明白，下面接着说 HashMap 里的数据结构。</p>
<h3 id="HashMap-中的数据结构"><a href="#HashMap-中的数据结构" class="headerlink" title="HashMap 中的数据结构"></a>HashMap 中的数据结构</h3><p>首先来看 <code>table</code> 属性所存储的 Node 链表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HashMap.Node</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    V value;</div><div class="line">    Node&lt;K,V&gt; next;</div><div class="line"></div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">        V oldValue = value;</div><div class="line">        value = newValue;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                Objects.equals(value, e.getValue()))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Node</code> 包含的域有 <code>hash</code>，<code>key</code>，<code>value</code> 和 <code>next</code>，其中 <code>next</code> 指向下一 <code>Node</code> 节点。<code>hashCode()</code> 方法通过求 <code>key</code> 和 <code>value</code> 的哈希值的异或计算 <code>hash</code>;</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/d0/Hash_table_5_0_1_1_1_1_1_LL.svg" alt=""></p>
<h3 id="put-get"><a href="#put-get" class="headerlink" title="put() / get()"></a>put() / get()</h3><p>HashMap 最主要的操作就是 <code>put()</code> 和 <code>get()</code>，先来看 <code>put()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        n = (tab = resize()).length;</div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;K,V&gt; e; K k;</div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key ||</div><div class="line">            (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            e = p;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                        treeifyBin(tab, hash);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                p = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">            V oldValue = e.value;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                e.value = value;</div><div class="line">            afterNodeAccess(e);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">        resize();</div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>拆解上面的 <code>putVal()</code> 方法，该方法有 5 个入参，主要的入参是 key 的哈希值，key 和 value，onlyIfAbsent 标识是否改变已存在的 value（默认 false，改变已存在的 value），evict 标识 hash bucket 数组是否为 creation mode（默认 true，非 creation mode）。<code>putVal()</code> 用了几个 <code>if-else</code> 对插入 key-value 时可能出现的情况做了不同的处理：</p>
<ul>
<li>通过 key 的哈希值计算 hash bucket 数组的 index 位置，如果该 index 位置的 Node 对象为空，则新建 Node 并写入 bucket 数组的 index 位置；</li>
<li>如果 index 位置上已存在 Node 对象，即发生碰撞时，也存在多种情况：<ul>
<li>如果该 Node 对象的 hash 和 key 都和入参 hash 和 key 一致，说明节点已存在；</li>
<li>如果该 Node 对象是红黑树节点，则把待插入的 Node 节点对象转换为红黑树节点对象 TreeNode；</li>
<li>否则，迭代 index 位置上存储的 Node 链表，直到最后一个 Node 节点，创建新的 Node 节点并接在末尾。如果 Node 链表长度超过 TREEIFY_THRESHOLD，就把 Node 链表转换为红黑树 TreeNode；</li>
</ul>
</li>
<li>如果节点已存在，就将节点的 value 替换为入参 value，并返回原 value 值。</li>
</ul>
<p>再看 <code>get()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            do &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>get()</code> 方法简明易懂，通过 key 的哈希值来定位 bucket 数组的 index，找到 Node 节点，从而找到所匹配的 value 值。</p>
<ul>
<li>从 index 上的 Node 链表的头节点开始，如果头节点的 hash 和 key 域都匹配，则命中，直接返回 value；</li>
<li>头节点没命中，意味着存在冲撞，就继续向下迭代，每次迭代一个 Node 节点时都判断当前节点是否为红黑树节点<ul>
<li>如果当前节点是红黑树节点，则获取从红黑树的 root 节点处开始遍历寻找匹配的 key 和 hash；</li>
<li>如果当前节点非红黑树节点，则检查节点的 hash 和 key 域，若匹配则返回 value 值；</li>
</ul>
</li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>红黑树部分需要单独写一篇。</p>
<h3 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h3><p><code>loadFactor</code> 属性可以控制 HashMap 的空间/时间使用：增大 <code>loadFactor</code> 则减小内存占用，但查找效率减慢；反之则内存占用变大，查找效率提升。</p>
<h3 id="JDK-8-下-HashMap-的改动"><a href="#JDK-8-下-HashMap-的改动" class="headerlink" title="JDK 8 下 HashMap 的改动"></a>JDK 8 下 HashMap 的改动</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java 容器类中，&lt;code&gt;HashMap&lt;/code&gt; 是一个绕不开的重点，无论是实际开发还是求职面试。由于对 JDK 6 下 &lt;code&gt;HashMap&lt;/code&gt; 的讨论已经很多了，而且 JDK 8 对 &lt;code&gt;HashMap&lt;/code&gt; 做了比较大的改进，本文仅对 &lt;strong&gt;JDK 8&lt;/strong&gt; 中 HashMap 的实现和工作原理做一点粗浅的讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Java" scheme="http://isudox.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP 本地模拟线上 RPC</title>
    <link href="http://isudox.com/2016/08/03/imitate-rpc-invoke-locally-by-spring-aop/"/>
    <id>http://isudox.com/2016/08/03/imitate-rpc-invoke-locally-by-spring-aop/</id>
    <published>2016-08-03T06:57:22.000Z</published>
    <updated>2016-08-03T09:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>成熟的互联网公司内部一般都会有多个线上环境，像在 JD，就有测试环境，预发布环境，生产环境。开发过程通常是现在本地编写代码，功能差不多了提到测试环境，再到预发布联调，测试通过再提交上线包部署到生产环境。但这是理想状况，实际开发中会有上下游系统联调的问题。</p>
<a id="more"></a>
<p>JD 的项目绝大多数都已经服务化了，服务的提供者和消费者分别在服务中心注册，消费者就能调用服务者的接口。但由于 JD 内部系统繁多，各有不同的开发团队维护各自的项目，除了生产环境和预发布环境能保证各系统间能互联互通，很多情况下，本地运行或在测试环境上运行时，没法调用到服务提供者的接口，这就很尴尬了，因为测试资源的不到位，只能上预发布环境进行上下游系统的对接联调，这是很烦人的，比较好的开发方案是，如果测试环境不完善，就从预发布环境上截取到服务接口的真实数据，把它打包成一个本地的测试数据资源库，以后直接在本地运行就行了。</p>
<p>如何拦截数据？这就需要 AOP 大显身手了。Spring AOP 可以通过 <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/aop/framework/autoproxy/BeanNameAutoProxyCreator.html" target="_blank" rel="external">BeanNameAutoProxyCreatoraaaa</a> 自动代理目标 bean，属性 <code>beanNames</code> 和 <code>interceptorNames</code> 分别设置要代理的目标 bean 列表和拦截器数组。这样就很方便的实现了对目标 bean 的切入拦截。</p>
<p>简单说下具体的实现流程：</p>
<ul>
<li>当线上运行时，通过拦截器对目标 bean 内部方法的拦截，将方法调用的结果持久化到结果文件中；</li>
<li>当本地运行时，拦截器就不走远程调用，而是直接从结果文件中读取真实的调用结果。</li>
</ul>
<p>下面给出大致的拦截服务调用数据的代码：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring-aop-config.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- method interceptor --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rpcInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.isudox.utils.RpcInterceptor"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mode"</span> <span class="attr">value</span>=<span class="string">"online"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"fileName"</span> <span class="attr">value</span>=<span class="string">"/home/sudoz/dev/local-rpc-data.properties"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- auto proxy --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rpcAutoProxyCreator"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beanNames"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>remoteService1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>remoteService2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>remoteService3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>remoteService4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>rpcInterceptor<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInteceptors</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RpcInterceptor.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mode = <span class="string">"local"</span>;  <span class="comment">// local || online</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String fileName = <span class="string">"/home/sudoz/dev/local-rpc-data.properties"</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File rpcResultFile = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Properties rpcResultProperties;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcInterceptor</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result;</div><div class="line">        String methodName = invocation.getMethod().getName();</div><div class="line">        Class&lt;?&gt; returnType = invocation.getMethod.getReturnType();</div><div class="line">        String className = invocation.getMethod().getDeclaringClass().getSimpleName();</div><div class="line">        Object[] args = invocation.getArguments();</div><div class="line">        </div><div class="line">        String key = className + <span class="string">"."</span> + methodName;</div><div class="line">        <span class="keyword">if</span> (StringUtils.equals(getMode(), <span class="string">"local"</span>)) &#123;</div><div class="line">            String value = rpcResultProperties.getProperty(key);</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class="line">                result = JSON.parseObject(value, returnType);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                result = invocation.proceed();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = invocation.proceed();</div><div class="line">            String value = JSON.toJSONString(result);</div><div class="line">            <span class="keyword">this</span>.appendRpcResult2File(key, value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendRpcResult2File</span><span class="params">(String k, String v)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">            <span class="keyword">if</span> (rpcResultFile.exists()) &#123;</div><div class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(rpcResultFile);</div><div class="line">                properties.load(fis);</div><div class="line">            &#125;</div><div class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(rpcResultFile);</div><div class="line">            properties.setProperty(k, v);</div><div class="line">            properties.store(fos, <span class="string">"blabla..."</span>);</div><div class="line">            fos.flush();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            logger.error(<span class="string">"appendRpcResult2File failed, &#123;&#125;"</span>, e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            fos.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMode</span><span class="params">(String mode)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mode = mode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getfileName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> fileName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setfileName</span><span class="params">(String fileName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fileName = fileName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在线上预发布环境跑一次，简单的通过 AOP 就一劳永逸的解决了联调测试的一大困扰。要是线上有一个专门做服务调用数据生成的应用，所有系统和开发人员都能从上面生成真实的测试数据，那就更好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;成熟的互联网公司内部一般都会有多个线上环境，像在 JD，就有测试环境，预发布环境，生产环境。开发过程通常是现在本地编写代码，功能差不多了提到测试环境，再到预发布联调，测试通过再提交上线包部署到生产环境。但这是理想状况，实际开发中会有上下游系统联调的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Spring" scheme="http://isudox.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 GitLab</title>
    <link href="http://isudox.com/2016/08/01/running-gitlab-in-docker-container/"/>
    <id>http://isudox.com/2016/08/01/running-gitlab-in-docker-container/</id>
    <published>2016-08-01T09:15:08.000Z</published>
    <updated>2016-08-08T07:24:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天给自己的域名添加了子域名 git，用来访问自己搭建的 <a href="https://about.gitlab.com/" target="_blank" rel="external">GitLab</a>。顺便实践了一把 Docker 的应用部署。</p>
<a id="more"></a>
<p>GitLab 的外部依赖很多，有 Nginx、Rails、Postgres、Redis、MySQL、unicorn、Go 等。如果单独安装各个依赖，一大堆的配置会让人抓狂。如果用官网提供的 omni 集成包，除非是全新的服务器，否则很大可能就导致依赖的重复安装，比如进程里有多个 Nginx、MySQL，很容易把服务器环境弄得很乱。像 GitLab 这样的程序，其实很适合用 Docker 来部署，一则和实机环境隔离开，另外运行性能相当好。</p>
<h3 id="安装-Docker-环境"><a href="#安装-Docker-环境" class="headerlink" title="安装 Docker 环境"></a>安装 Docker 环境</h3><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>惯例，以 Debian 8 为参考，把 Docker 官方维护的 deb 包添加到系统的 APT 源内，创建文件 <code>/etc/apt/sources.list.d/docker.list</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb https://apt.dockerproject.org/repo debian-jessie main</div></pre></td></tr></table></figure>
<p>更新源，安装 <code>docker-engine</code> 包，执行 <code>ps -ef | grep docker</code> 查看 Docker 的进程，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root      2885     1  0 09:40 ?        00:00:10 /usr/bin/dockerd --raw-logs</div><div class="line">root      2897  2885  0 09:40 ?        00:00:00 docker-containerd -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --shim docker-containerd-shim --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --runtime docker-runc</div><div class="line">sudoz    21053  6463  0 14:54 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn docker</div></pre></td></tr></table></figure>
<p>可以看到，Docker 的守护进程以 root 用户运行，通过绑定 Unix socket 而非 TCP 端口号来转发数据，通常 Unix socket 所属用户是 root，所以在执行 <code>docker [command]</code> 时需要加上 <code>sudo</code>。如果非 root 用户需要 docker 命令的执行权限，可以把用户加进 docker 用户组，这样 docker 守护进程在启动时，把 Unix socket 读写权限赋予给 docker 用户组，从而使得非 root 用户获得 docker 执行权限。很简单，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo groupadd docker</div><div class="line">sudo sudo usermod <span class="_">-a</span>G docker $(whoami)</div><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
<h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search [image]</div></pre></td></tr></table></figure>
<p>在 Docker Hub 上搜索相关的镜像，并返回镜像的状态和信息；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull [image]</div></pre></td></tr></table></figure>
<p>从 Docker Hub 上下载指定的镜像，注意此时并没有运行 Docker 容器，仅仅只是下载；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [image]</div></pre></td></tr></table></figure>
<p>在容器内运行已下载的指定镜像，如果镜像未下载完成，会先执行下载；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps [<span class="_">-l</span>, <span class="_">-a</span>]</div></pre></td></tr></table></figure>
<p>类似系统的 ps 命令，查看当前正在运行的 Docker 容器，-l 参数是显示最近运行的容器，-a 参数显示全部的容器；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker stop/start/restart [container]</div></pre></td></tr></table></figure>
<p>容器有唯一的 ID，可以通过上述命令停止/启动/重启指定容器；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm [container]</div></pre></td></tr></table></figure>
<p>删除指定的容器；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<p>查看全部已下载的 Docker 镜像；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rmi [image]</div></pre></td></tr></table></figure>
<p>删除指定的 Docker 镜像；</p>
<p>目前为止，这些命令已经够用了。还有一些命令的参数没有展开，用到的时候再具体解释。</p>
<h3 id="Docker-运行-GitLab"><a href="#Docker-运行-GitLab" class="headerlink" title="Docker 运行 GitLab"></a>Docker 运行 GitLab</h3><p>Docker Hub 上维护的 GitLab 镜像有好几个，我没有选官方维护的镜像，而是 <a href="https://hub.docker.com/r/sameersbn/gitlab/" target="_blank" rel="external">sameersbn/gitlab</a> 镜像，这个镜像相比官方的更灵活。</p>
<p>安装很简单，参考上面给出的 Docker 命令，先下载镜像。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/gitlab:8.10.2</div></pre></td></tr></table></figure>
<p>Docker 提供了一个快速运行的工具 <a href="https://docs.docker.com/compose/" target="_blank" rel="external">docker-compose</a>，docker-compose 可以将配置文件里的 docker 命令和参数解释出来并运行，镜像的作者提供了可供参考的配置文件 <a href="https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml" target="_blank" rel="external">docker-compose.yml</a>。从文件里可以看到，该 GitLab 镜像依赖了 Postgres 和 Redis，这些在镜像里没有包含，可以连接外部已经存在的服务，或者另起容器去运行这些依赖服务。</p>
<p>或者手动去运行容器，不通过 docker-compose。<br>首先，运行 Postgres 容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-postgresql <span class="_">-d</span> \</div><div class="line">    --env <span class="string">'DB_NAME=gitlabhq_production'</span> \</div><div class="line">    --env <span class="string">'DB_USER=gitlab'</span> --env <span class="string">'DB_PASS=your_password'</span> \</div><div class="line">    --env <span class="string">'DB_EXTENSION=pg_trgm'</span> \</div><div class="line">    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \</div><div class="line">    sameersbn/postgresql:9.4-24</div></pre></td></tr></table></figure>
<p>然后，运行 Redis 容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-redis <span class="_">-d</span> \</div><div class="line">    --volume /srv/docker/gitlab/redis:/var/lib/redis \</div><div class="line">    sameersbn/redis:latest</div></pre></td></tr></table></figure>
<p>最后，运行 GitLab 容器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab <span class="_">-d</span> \</div><div class="line">    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \</div><div class="line">    --publish 10022:22 --publish 10080:80 \</div><div class="line">    --env <span class="string">'GITLAB_PORT=10080'</span> --env <span class="string">'GITLAB_SSH_PORT=10022'</span> \</div><div class="line">    --env <span class="string">'GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string'</span> \</div><div class="line">    --volume /srv/docker/gitlab/gitlab:/home/git/data \</div><div class="line">    sameersbn/gitlab:8.10.2</div></pre></td></tr></table></figure>
<p>上面的命令涉及几个参数，分别解释下：</p>
<ul>
<li><code>--name</code> 参数设置容器的名称，该名称必须唯一；</li>
<li><code>-d</code> 参数使容器在后台运行；</li>
<li><code>--volume</code> 参数设置容器挂载的磁盘目录（和宿主机共享）；</li>
<li><code>--env</code> 参数设置容器的环境变量；</li>
<li><code>link</code> 参数指定容器需要连接的其他容器；</li>
<li><code>publish</code> 参数指定容器的外部端口号和内部端口号；</li>
</ul>
<p>对比手动运行的命令参数和配置文件的参数，两者是一致的。</p>
<p>Docker 容器挂载的共享目录在容器删除时并不会一并被删除，这里需要留意，如果 <code>/srv/gitlab</code> 里的文件不需要的话，可以手动删除，以免再次运行容器时发生前后配置差异的冲突。</p>
<p>GitLab 容器运行起来后，通过 <code>docker logs -f [container]</code> 来查看运行时日志，运行正常的话，就能访问 <a href="http://localhost:10080" target="_blank" rel="external">http://localhost:10080</a> 看到 GitLab 了。当然这只是在本地运行，如果要部署到服务器上，还需要再做些工作。我的目标是通过 git 子域名访问 Docker 容器内的 GitLab，同时支持 HTTPS 访问。</p>
<h3 id="Nginx-反代-Docker-容器"><a href="#Nginx-反代-Docker-容器" class="headerlink" title="Nginx 反代 Docker 容器"></a>Nginx 反代 Docker 容器</h3><p>要实现上面的目标，需要用到 Nginx 的反向代理，用 Nginx 作为负载的前端，将访问请求代理到 Docker 容器的外部端口上，从访问者的角度上看，就好像直接通过域名访问到 GitLab 一样。</p>
<h4 id="开启-GitLab-SSL-支持"><a href="#开启-GitLab-SSL-支持" class="headerlink" title="开启 GitLab SSL 支持"></a>开启 GitLab SSL 支持</h4><p>Docker GitLab 的 <code>--publish</code> 参数设置了 10080:80 的端口号，这表明容器内部的 80 端口映射到宿主机的 10080 端口上，因此访问 Docker 容器的外部端口来访问容器内的应用。</p>
<p>如果是通过上述方式访问 GitLab，那么 SSL 的配置是在 Docker 内部完成，这里不做说明了，我的想法是通过外部负载，比如 Nginx，转发请求到 Docker 容器的端口上。</p>
<p>首先得为 GitLab 的域名准备好 SSL 证书，这个在上一篇水文中已经写了。设置 Docker 容器的环境变量 <code>GITLAB_HTTPS=true</code>，使得 GitLab 支持 HTTPS，将环境变量 <code>GITLAB_PORT</code> 改为 443，把环境变量 <code>GITLAB_HOST</code> 设置为和 SSL 证书相匹配的域名，这样 GitLab 容器的运行命令变成如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab <span class="_">-d</span> \</div><div class="line">    --publish 10022:22 --publish 10080:80 \</div><div class="line">    --env <span class="string">'GITLAB_SSH_PORT=10022'</span> --env <span class="string">'GITLAB_PORT=443'</span> \</div><div class="line">    --env <span class="string">'GITLAB_HTTPS=true'</span> --env <span class="string">'GITLAB_HOST=git.isudox.com'</span> \</div><div class="line">    --volume /srv/docker/gitlab/gitlab:/home/git/data \</div><div class="line">    sameersbn/gitlab:8.10.2</div></pre></td></tr></table></figure>
<h4 id="反向代理到-Docker"><a href="#反向代理到-Docker" class="headerlink" title="反向代理到 Docker"></a>反向代理到 Docker</h4><p>GitLab 容器正常启动后，还需要 Nginx 把请求反向代理到容器上。如果只是把 HTTP 的请求反代到 GitLab 并不麻烦，但需要同时把 HTTP 重定向 HTTPS。且看下面的 Nginx 配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">upstream gitlab &#123;</div><div class="line">    server 45.33.47.109:10080 fail_timeout=0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name git.isudox.com;</div><div class="line">    server_tokens off;</div><div class="line"></div><div class="line">    access_log off;</div><div class="line"></div><div class="line">    root /dev/null;</div><div class="line"></div><div class="line">    client_max_body_size 0;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_read_timeout 300;</div><div class="line">        proxy_connect_timeout 300;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header X-Forwarded-Proto $scheme;</div><div class="line">        proxy_set_header X-Frame-Options SAMEORIGIN;</div><div class="line">        proxy_pass http://gitlab;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen 443 ssl;</div><div class="line">    server_name git.isudox.com;</div><div class="line">    server_tokens off;</div><div class="line"></div><div class="line">    root /dev/null;</div><div class="line">    client_max_body_size 0;</div><div class="line"></div><div class="line">    ssl on;</div><div class="line">    ssl_certificate /path-to-your-crt;</div><div class="line">    ssl_certificate_key /path-to-your-key;</div><div class="line">    ssl_verify_client off;</div><div class="line"></div><div class="line">    ssl_ciphers</div><div class="line">    &quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&quot;;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_session_cache shared:SSL:10m;</div><div class="line">    ssl_session_timeout 5m;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        gzip off;</div><div class="line"></div><div class="line">        proxy_read_timeout 300;</div><div class="line">        proxy_connect_timeout 300;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header X-Forwarded-Proto https;</div><div class="line">        proxy_set_header X-Frame-Options SAMEORIGIN;</div><div class="line">        proxy_pass http://gitlab;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试下 HTTP 到 HTTPS 的重定向，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">"X-Forwarded-Proto: https"</span> http://45.33.47.109:10080/user/sign_in</div><div class="line">&lt;html&gt;&lt;body&gt;You are being &lt;a href=<span class="string">"https://45.33.47.109:10080/users/sign_in"</span>&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>验收下最终的成果，<a href="http://git.isudox.com" target="_blank" rel="external">GitLab</a></p>
<p>最后，贴上我的 <code>docker-composer.yml</code> 配置，仅作备忘。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'2'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    image:</span> sameersbn/redis:latest</div><div class="line"><span class="attr">    command:</span></div><div class="line"><span class="bullet">    -</span> --loglevel warning</div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">    -</span> /srv/docker/gitlab/redis:/var/lib/redis:Z</div><div class="line"></div><div class="line"><span class="attr">  postgresql:</span></div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    image:</span> sameersbn/postgresql:<span class="number">9.4</span><span class="bullet">-24</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">    -</span> /srv/docker/gitlab/postgresql:/var/lib/postgresql:Z</div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">    -</span> DB_USER=gitlab</div><div class="line"><span class="bullet">    -</span> DB_PASS=helloworld</div><div class="line"><span class="bullet">    -</span> DB_NAME=gitlabhq_production</div><div class="line"><span class="bullet">    -</span> DB_EXTENSION=pg_trgm</div><div class="line"></div><div class="line"><span class="attr">  gitlab:</span></div><div class="line"><span class="attr">    restart:</span> always</div><div class="line"><span class="attr">    image:</span> sameersbn/gitlab:<span class="number">8.10</span><span class="number">.3</span></div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">    -</span> redis</div><div class="line"><span class="bullet">    -</span> postgresql</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"10080:80"</span></div><div class="line"><span class="bullet">    -</span> <span class="string">"10022:22"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">    -</span> /srv/docker/gitlab/gitlab:/home/git/data:Z</div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">    -</span> DEBUG=<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> DB_ADAPTER=postgresql</div><div class="line"><span class="bullet">    -</span> DB_HOST=postgresql</div><div class="line"><span class="bullet">    -</span> DB_PORT=<span class="number">5432</span></div><div class="line"><span class="bullet">    -</span> DB_USER=gitlab</div><div class="line"><span class="bullet">    -</span> DB_PASS=helloworld</div><div class="line"><span class="bullet">    -</span> DB_NAME=gitlabhq_production</div><div class="line"></div><div class="line"><span class="bullet">    -</span> REDIS_HOST=redis</div><div class="line"><span class="bullet">    -</span> REDIS_PORT=<span class="number">6379</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> TZ=Asia/Shanghai</div><div class="line"><span class="bullet">    -</span> GITLAB_TIMEZONE=Beijing</div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_HTTPS=<span class="literal">true</span></div><div class="line"><span class="bullet">    -</span> SSL_SELF_SIGNED=<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_HOST=git.isudox.com</div><div class="line"><span class="bullet">    -</span> GITLAB_PORT=<span class="number">443</span></div><div class="line"><span class="bullet">    -</span> GITLAB_SSH_PORT=<span class="number">10022</span></div><div class="line"><span class="bullet">    -</span> GITLAB_RELATIVE_URL_ROOT=</div><div class="line"><span class="bullet">    -</span> GITLAB_SECRETS_DB_KEY_BASE=qwertyuiopasdfghjklzxcvbnm</div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_ROOT_PASSWORD=</div><div class="line"><span class="bullet">    -</span> GITLAB_ROOT_EMAIL=</div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_NOTIFY_ON_BROKEN_BUILDS=<span class="literal">true</span></div><div class="line"><span class="bullet">    -</span> GITLAB_NOTIFY_PUSHER=<span class="literal">false</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_EMAIL=hi@gmail.com</div><div class="line"><span class="bullet">    -</span> GITLAB_EMAIL_DISPLAY_NAME=GitLab</div><div class="line"><span class="bullet">    -</span> GITLAB_EMAIL_REPLY_TO=hi@gmail.com</div><div class="line"><span class="bullet">    -</span> GITLAB_EMAIL_ENABLED=<span class="literal">true</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> GITLAB_BACKUP_SCHEDULE=daily</div><div class="line"><span class="bullet">    -</span> GITLAB_BACKUP_TIME=<span class="number">05</span>:<span class="number">00</span></div><div class="line"></div><div class="line"><span class="bullet">    -</span> SMTP_ENABLED=enable</div><div class="line"><span class="bullet">    -</span> SMTP_DOMAIN=www.gmail.com</div><div class="line"><span class="bullet">    -</span> SMTP_HOST=smtp.gmail.com</div><div class="line"><span class="bullet">    -</span> SMTP_PORT=<span class="number">587</span></div><div class="line"><span class="bullet">    -</span> SMTP_USER=hi@gmail.com</div><div class="line"><span class="bullet">    -</span> SMTP_PASS=helloworld</div><div class="line"><span class="bullet">    -</span> SMTP_STARTTLS=<span class="literal">true</span></div><div class="line"><span class="bullet">    -</span> SMTP_AUTHENTICATION=login</div><div class="line"></div><div class="line"><span class="bullet">    -</span> IMAP_ENABLED=<span class="literal">false</span></div><div class="line"><span class="bullet">    -</span> IMAP_HOST=imap.gmail.com</div><div class="line"><span class="bullet">    -</span> IMAP_PORT=<span class="number">993</span></div><div class="line"><span class="bullet">    -</span> IMAP_USER=hi@gmail.com</div><div class="line"><span class="bullet">    -</span> IMAP_PASS=helloworld</div><div class="line"><span class="bullet">    -</span> IMAP_SSL=<span class="literal">true</span></div><div class="line"><span class="bullet">    -</span> IMAP_STARTTLS=<span class="literal">false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天给自己的域名添加了子域名 git，用来访问自己搭建的 &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;GitLab&lt;/a&gt;。顺便实践了一把 Docker 的应用部署。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://isudox.com/categories/DevOps/"/>
    
    
      <category term="Git" scheme="http://isudox.com/tags/Git/"/>
    
      <category term="Docker" scheme="http://isudox.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>为子域名安装 SSL 证书</title>
    <link href="http://isudox.com/2016/07/28/secure-subdomain-with-ssl-certificate/"/>
    <id>http://isudox.com/2016/07/28/secure-subdomain-with-ssl-certificate/</id>
    <published>2016-07-28T09:07:42.000Z</published>
    <updated>2016-07-28T12:25:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天把小站所在 Linode 服务器升级到了 4G 2CPU 的配置，可以搞搞大新闻了，打算用 Docker 部署下 GitLab 作为和前辈小伙伴们写作开发的代码库，把 GitLab 绑定到小站的子域名下。另外还得再加上 SSL 证书。<br>Docker 部署 GitLab 的事后面再写，先记下给子域名安装证书的事。</p>
<a id="more"></a>
<h3 id="解析子域名"><a href="#解析子域名" class="headerlink" title="解析子域名"></a>解析子域名</h3><p>从域名提供商买到域名后，可以用在多个不同的网站上。比如经常可以看到类似这样的域名，<code>bss.example.com</code>，<code>blog.example.com</code>，其实这俩是彼此独立的网站，但是都访问到 <code>sample.com</code> 域名下，这就是在同一域名下部署多个网站的范例。</p>
<p>域名和 IP 通过 DNS 关联在一起，所以无论常见多少个子域名，都是要通过 DNS 解析到关联 IP 的服务器上。如果要新增子域名，需要在提供 DNS 解析服务的提供商处建立一条解析，将子域名关联到根域名的 IP 上。</p>
<p>本人小站的域名是从 Godaddy 上购买，但域名解析服务是并没有用 Godaddy 默认提供的服务，而是用了 Linode 提供的免费解析服务。但操作都是相同的，在 DNS 的 <code>zone file</code> 中添加一条 A/AAAA 记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git        A        45.33.47.109</div><div class="line">git        AAAA     2600:3c01::f03c:91ff:fe18:68b6</div></pre></td></tr></table></figure>
<p>添加完后等待 DNS 服务更新，大概 15 分钟后就能 ping 通这条新建的子域名。这就意味着对子域名的访问已经通过 DNS 解析指向了我的 Linode 服务器上。</p>
<p>现在要完成的就是通过 HTTP Server 将访问请求打到网站的目录下，我是用 Nginx，在 Nginx conf 里添加子域名解析的针对性配置或者泛子域名解析的通用配置。较新版本的 Nginx 的多站点配置默认保存在 <code>/etc/nginx/conf.d/*.conf</code> 文件里，而不再是 <code>site-enabled</code> 里。新建 <code>subdomain.conf</code> 配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name ~^(?&lt;subdomain&gt;.+)\.isudox\.com$;  # 通配符匹配子域名</div><div class="line">    server_tokens off  # 隐藏 nignx 信息</div><div class="line">    location / &#123;</div><div class="line">        root /usr/share/nginx/html/$subdomain;</div><div class="line">        index index.html index.htm</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Nginx 默认的网站根目录下新建 <code>git</code> 目录，写一个 <code>Hello, Git</code> 的 index.html，浏览器访问下，OK！</p>
<p>如果后续还要新增其他子域名，可以类似的再写一个 Nginx conf 配置，或者直接用泛子域名解析的 conf 文件。</p>
<h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>接下来就是给子域名安装 SSL 证书。小站域名 <code>isudox.com</code> 绑定了 Comodo 颁发的证书，但从 Comodo 买的这张证书并不支持通配符域名，因此这张证书就没法用在二级域名 <code>&lt;subdomain.isudox.com&gt;</code>。那么还得再去申请一张证书。<br>有钱的话，买什么样的证书都行；然而没钱，那就只能从下面几家能提供免费 SSL 证书的提供商里挑了。</p>
<ul>
<li><a href="https://www.wosign.com/" target="_blank" rel="external">WoSign</a></li>
<li><a href="https://www.startssl.com/" target="_blank" rel="external">StartSSL</a></li>
<li><a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a></li>
</ul>
<p>其中，Let’s Encrypt 的逼格应该是最高的，StartSSL 口碑比较好，WoSign 弃之。先述说 Let’s Encrypt 证书的申请。</p>
<h4 id="Let’s-Encrypt-证书"><a href="#Let’s-Encrypt-证书" class="headerlink" title="Let’s Encrypt 证书"></a>Let’s Encrypt 证书</h4><p>Let’s Encrypt 证书的申请需要一点点动手能力，它提供了一个官方的脚本生成工具 <a href="https://certbot.eff.org/" target="_blank" rel="external">certbot</a>，只支持 Unix-liked 系统，把脚本下载本地，并添加执行权限。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://dl.eff.org/certbot-auto</div><div class="line">chmod a+x certbot-auto</div></pre></td></tr></table></figure>
<p>certbot 支持几种不同的插件（apache、webroot、standalone、manual、nginx），用来获取和安装证书。但插件 nginx 还是试验阶段，可以使用 webroot 或 standalone 插件。区别是 webroot 插件用在已经运行着网站的服务器上，可以通过指定网站的目录来获取并安装证书：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./certbot-auto certonly --webroot -w /var/www/example/ <span class="_">-d</span> www.example.com <span class="_">-d</span> example.com -w /var/www/other <span class="_">-d</span> other.example.net <span class="_">-d</span> another.other.example.net</div></pre></td></tr></table></figure>
<p>而 standalone 插件则用在本地机器上，通过指定网站的域名来获取和安装证书。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./certbot-auto certonly --standalone <span class="_">-d</span> example.com <span class="_">-d</span> www.example.com</div></pre></td></tr></table></figure>
<p>Let’s Encrypt 的证书有效期是三个月，可以用 <code>letsencrypt renew</code> 命令重新激活。最后就是将证书的路径写入到 Nginx conf 配置里。</p>
<h4 id="StartSSL-证书"><a href="#StartSSL-证书" class="headerlink" title="StartSSL 证书"></a>StartSSL 证书</h4><p>StartSSL 的证书生成就傻瓜多了，上手更容易，有效期也有一年之久。<br>用 <code>openssL</code> 生成 .csr 文件，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl req -newkey rsa:2048 -keyout git.isudox.com.key -out git.isudox.com.csr</div></pre></td></tr></table></figure>
<p>命令会要求输入一个 passphrase 作为解码凭据，生成后将文件内容粘贴到 StartSSL 的网站上进行证书注册。之后就能从 StartSSL 上下载该子域名的证书文件，把 .key 后缀的密钥文件和 StartSSL 提供的证书文件上传到服务器上，并把二者的路径写入到 Nginx conf 里，在原来的子域名 conf 里添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    return 301 https://$subdomain.isudox.com;  # HTTP 访问重定向到 HTTPS</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 443 ssl http2;</div><div class="line">    server_name ~^(?&lt;subdomain&gt;.+)\.isudox\.com$;</div><div class="line">    location / &#123;</div><div class="line">        root /usr/share/nginx/html/$subdomain;</div><div class="line">        index index.html index.htm</div><div class="line">    &#125;</div><div class="line">    ssl on;</div><div class="line">    ssl_session_timeout 5m;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">    ssl_certificate /path-to-crt/git.isudox.com.crt;</div><div class="line">    ssl_certificate_key /path-to-key/git.isudox.com.key;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重启 Nginx 发现失败了，原因是之前埋了个坑，通过 <code>openssL</code> 工具生成密钥对的时候，必须要求输入 passphrase，直接启动 Nginx 服务时没有匹配 passphrase 自然也就失败了。参考 Nginx <a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_password_file" target="_blank" rel="external">官方文档</a>，Nginx 提供了一个参数 <code>ssl_password_file</code> 指定记录 passphrase 的文件。把 passphrase 写入该文件，并关联到 <code>ssl_password_file</code> 参数就能正常启动 Nginx 了。</p>
<p>当然，如果是用 <code>ssh-keygen -t rsa</code> 命令生成密钥对，就不会强制要求 passphrase，也就不会有这个问题。</p>
<p>现在再打开 git.isudox.com，就自动跳转到了 HTTPS 协议，URL 上挂小绿锁的视觉效果确实不错。<br><img src="https://o70e8d1kb.qnssl.com/url-with-green-lock.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天把小站所在 Linode 服务器升级到了 4G 2CPU 的配置，可以搞搞大新闻了，打算用 Docker 部署下 GitLab 作为和前辈小伙伴们写作开发的代码库，把 GitLab 绑定到小站的子域名下。另外还得再加上 SSL 证书。&lt;br&gt;Docker 部署 GitLab 的事后面再写，先记下给子域名安装证书的事。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="http://isudox.com/categories/DevOps/"/>
    
    
      <category term="Nginx" scheme="http://isudox.com/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="http://isudox.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>JetBrains IDE Vim 模式的方案</title>
    <link href="http://isudox.com/2016/07/26/scheme-of-ideavim-keymap/"/>
    <id>http://isudox.com/2016/07/26/scheme-of-ideavim-keymap/</id>
    <published>2016-07-26T08:47:03.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的一篇<a href="/2016/05/17/intellij-idea-keymap-zh/">博客</a>翻译了 IntelliJ IDEA 的默认快捷键操作。快捷操作的功能覆盖面已经很全了，但如果想进阶键盘流，可能还需要一点文本编辑上的快操，比如 Vim 模式。用户有需求，良心厂商 JetBrains 就自己开发了一款强大插件 <a href="https://github.com/JetBrains/ideavim" target="_blank" rel="external">Ideavim</a>，模拟 Vim 编辑器的操作。</p>
<a id="more"></a>
<p>在安装 ideavim 插件后，IDE 可能会处在几种不同的模式下：</p>
<ul>
<li>Vim 模拟器关闭模式（Vim Emulator off）</li>
<li>Vim 模拟器开启模式（Vim Emulator on）</li>
<li>Vim 命令模式（Command mode）</li>
<li>Vim 插入模式（Insert mode）</li>
<li>Vim 末行命令模式（Last line mode）</li>
</ul>
<p>当关闭 Vim 模拟器时，IDE 的 Keymap 会恢复到安装 Ideavim 之前的状态，因此最好是在自己自定义设置并熟悉 IDE 自带的 keymap 后安装 Ideavim 插件。开启/关闭 Vim 模拟器的快捷键可以北自定义，默认的切换快捷键是 <code>Ctrl</code> + <code>Alt</code> + <code>V</code>，这个切换方式和 IDE 自带的快捷键冲突，可以考虑改成更合适的映射。我把切换 Vim 开关状态的快捷键修改成了 <code>Ctrl</code> + <code>;</code>，这样，如果 <code>Caps</code> 键映射成 <code>Ctrl</code> 键，左手右手一个慢动作，可以很方便的开启/关闭 Vim 模拟器。</p>
<p>Vim 模拟器关闭状态下就不多讲了，之前都翻译过。在 Vim 模拟器开启后，IDE 就拥有了 Vim 编辑器的强大功能（不是全部，但也很强大了）。Vim 的三个模式基本都耳熟能详了，命令模式下的键盘动作会被识别为命令，而不是字符输入，比如 <code>a</code> 进入 append 输入，<code>i</code> 进入 insert 输入，<code>x</code> 删除光标所在的字符，<code>X</code> 删除光标之前的字符，<code>dd</code> 删除光标所在行，<code>yy</code> 复制当前行，<code>p</code> 粘贴等。插入模式就是正常的文本输入编辑，<code>Esc</code> 键退出插入模式，或者 <code>Ctrl</code> + <code>[</code>。末行命令模式是从命令模式下按 <code>:</code> 键进入，可以执行保存、退出、<code>set:options</code> 等操作。</p>
<p>Vim 模拟器的很多快捷键都和 IDE 默认的快捷键有冲突，比如常用的 <code>Ctrl</code> + <code>C</code>，IDE 在第一次检测到快捷键冲突时会弹框让用户选择该快捷键的功能是 IDE 默认还是 Vim 模式，我的选择是尽量把冲突的快捷键定义为 Vim 模式，然后去修改 IDE 的默认快捷键。下面列了一张快捷键冲突表——</p>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">IDE 功能</th>
<th style="text-align:center">Vim 功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Ctrl+2</td>
<td style="text-align:center">Project Directory</td>
<td style="text-align:center">空缺</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+Shift+2</td>
<td style="text-align:center">插入/取消标记 2</td>
<td style="text-align:center">空缺</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+Shift+6</td>
<td style="text-align:center">插入/取消标记 6</td>
<td style="text-align:center">空缺</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+A</td>
<td style="text-align:center">全选</td>
<td style="text-align:center">光标所在数字递增</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+B</td>
<td style="text-align:center">跳转至引用</td>
<td style="text-align:center">向上翻一屏</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+C</td>
<td style="text-align:center">复制</td>
<td style="text-align:center">退出插入模式</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+D</td>
<td style="text-align:center">文件 diff / 复写当前行</td>
<td style="text-align:center">向下翻半屏</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+E</td>
<td style="text-align:center">打开最近的文档</td>
<td style="text-align:center">向下滚动行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+F</td>
<td style="text-align:center">查找</td>
<td style="text-align:center">向下翻一屏</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+G</td>
<td style="text-align:center">跳转到指定行</td>
<td style="text-align:center">打印当前文件名</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+H</td>
<td style="text-align:center">当前类型的继承关系</td>
<td style="text-align:center">光标退格</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+I</td>
<td style="text-align:center">Implement 方法</td>
<td style="text-align:center">跳转到下一个位置</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+M</td>
<td style="text-align:center">光标所在行滚动到屏幕中央</td>
<td style="text-align:center">移动到下一行的首个非空字符</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+N</td>
<td style="text-align:center">创建新文件夹</td>
<td style="text-align:center">移动到下一行，光标相对位置不变</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+O</td>
<td style="text-align:center">Override 方法</td>
<td style="text-align:center">跳转到 <a href="http://vim.wikia.com/wiki/Jumping_to_previously_visited_locations" target="_blank" rel="external">Jump List</a> 上一位置</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+P</td>
<td style="text-align:center">Show/Hide path text</td>
<td style="text-align:center">移动到上一行，光标相对位置不变</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+Q</td>
<td style="text-align:center">Quick Documentation</td>
<td style="text-align:center">Ctrl-V 的替代</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+R</td>
<td style="text-align:center">替换文本</td>
<td style="text-align:center">撤销上一次改动</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+S</td>
<td style="text-align:center">保存全部改动</td>
<td style="text-align:center">分割窗口</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+T</td>
<td style="text-align:center">更新工程</td>
<td style="text-align:center">跳转到 <a href="http://vim.wikia.com/wiki/Browsing_programs_with_tags" target="_blank" rel="external">Tag Stack</a> 上一位置</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+U</td>
<td style="text-align:center">跳转至父类方法</td>
<td style="text-align:center">向上翻半屏</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+V</td>
<td style="text-align:center">粘贴</td>
<td style="text-align:center">开启 Visual 模式</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+W</td>
<td style="text-align:center">智能选中</td>
<td style="text-align:center">窗口命令，后跟具体指令</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+X</td>
<td style="text-align:center">剪切</td>
<td style="text-align:center">光标所在数字递减</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+Y</td>
<td style="text-align:center">删除选中的行</td>
<td style="text-align:center">向上滚动行</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+[</td>
<td style="text-align:center">光标移动到代码块的起始位置</td>
<td style="text-align:center">退出插入模式</td>
</tr>
<tr>
<td style="text-align:center">Ctrl+]</td>
<td style="text-align:center">光标移动到代码块的结束位置</td>
<td style="text-align:center">跳转到关键字的声明处</td>
</tr>
</tbody>
</table>
<p>上述所有冲突的快捷键尽量保留 Vim 功能，而 IDE 原有的快捷键功能会被覆盖掉。其中部分被覆盖掉的 IDE 快捷键非常有用，建议重新绑定新的快捷键映射。比如 Ctrl+H 原来绑定的查看当前类型的继承关系，Ctrl+W 智能选中，都是非常好用的功能，而且在 Vim 中没有提供的。</p>
<p>还有一个细节可能会造成困扰，就是当 Vim 模拟器关闭时，光标是呈竖条状；Vim 模拟器开启时，光标在命令模式时呈竖块状，在插入模式时呈竖条状。这就导致一个问题，当光标是竖条状时，怎么知道当前是处在 Vim 模拟器关闭状态，还是 Vim 模拟器的插入模式呢？<br>暂时还没想到特别聪明的办法，不过笨一点可以在不知道当前是那个编辑状态时，按 Esc 键，如果光标变成竖块状，就证明 Vim 模拟器是开启状态，否则就是关闭状态。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的一篇&lt;a href=&quot;/2016/05/17/intellij-idea-keymap-zh/&quot;&gt;博客&lt;/a&gt;翻译了 IntelliJ IDEA 的默认快捷键操作。快捷操作的功能覆盖面已经很全了，但如果想进阶键盘流，可能还需要一点文本编辑上的快操，比如 Vim 模式。用户有需求，良心厂商 JetBrains 就自己开发了一款强大插件 &lt;a href=&quot;https://github.com/JetBrains/ideavim&quot;&gt;Ideavim&lt;/a&gt;，模拟 Vim 编辑器的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="JetBrains" scheme="http://isudox.com/tags/JetBrains/"/>
    
      <category term="Vim" scheme="http://isudox.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>开始使用 PostgreSQL</title>
    <link href="http://isudox.com/2016/07/22/guide-for-postgresql-beginners/"/>
    <id>http://isudox.com/2016/07/22/guide-for-postgresql-beginners/</id>
    <published>2016-07-22T02:49:49.000Z</published>
    <updated>2016-08-29T13:26:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始做的一个课余项目用 Flask + PostgreSQL + Bootstrap 快速开发。之前本地开发和生产部署都用 <a href="https://www.mysql.com/" target="_blank" rel="external">MySQL</a>，而 <a href="https://www.postgresql.org/" target="_blank" rel="external">PostgreSQL</a> 是关系型数据库阵营中的另一大高手。这俩的口号放在一起看相当好玩。</p>
<a id="more"></a>
<p><img src="https://o70e8d1kb.qnssl.com/mysql-vs-postgresql.png" alt=""></p>
<p>一个自称 “The world’s most popular open source database”，另一个自称 “The world’s most advanced open source database”。论针锋相对，我就服这俩。→_→</p>
<p>至于 MySQL 和 PostgreSQL 之间的比较，可以参考 Digital Ocean 社区里的一篇文章，写的很详细，顺便还拉上了 SQLite。<br><a href="https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems" target="_blank" rel="external">SQLite vs MySQL vs PostgreSQL: A Comparison Of Relational Database Management Systems</a></p>
<p>菜鸟入门三板斧，安装、配置和使用——</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>服务器端我习惯用 Debian 系统。Debian/Ubuntu 内置的 APT 源已经包含了 PostgreSQL，但版本上会稍滞后于 PostgreSQL 最新版本。如果像我一样激进的，可以把 PostgreSQL 官方维护的 APT 源加进 Debian/Ubuntu 的 APT 列表中。比如在 Debian 系统下，新建文件 <code>/etc/apt/sources.list.d/pgdg.list</code>，添加源地址和版本，再导入该源的签名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb http://apt.postgresql.org/pub/repos/apt/ jessie-pgdg main</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</div><div class="line">sudo apt update &amp;&amp; sudo apt install postgresql postgresql-client postgresql-contrib postgresql-server-dev</div></pre></td></tr></table></figure>
<p>安装 PostgreSQL 会安装多个核心包和扩展包，常用和重要的包有：</p>
<ul>
<li>postgresql-client: 客户端库和二进制文件</li>
<li>postgresql: 核心数据库服务器</li>
<li>postgresql-contrib: 额外的支持模块</li>
<li>libpq-dev: C 语言的头文件和库（前端）</li>
<li>postgresql-server-dev: C 语言的头文件和库（后端）</li>
<li>pgadmin3: 图形化工具集（服务器端无需安装）</li>
</ul>
<p>安装后查看服务运行状况 <code>sudo service postgresql status</code>，查看守护进程运行状况 <code>ps -ef | grep postgres</code>。PostgreSQL 默认监听 5432 端口。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="创建用户-角色"><a href="#创建用户-角色" class="headerlink" title="创建用户/角色"></a>创建用户/角色</h4><p>PostgreSQL 会自动创建名为 <code>postgres</code> 的 Linux 用户，用来操作 PostgreSQL 数据库。先修改 <code>postgres</code> 的用户密码，<code>sudo passwd postgres</code>；再切换至 <code>postgres</code> 用户，<code>su - postgres</code>，输入刚才设置的用户密码，成功切换后可以看到 <code>postgres</code> 的用户目录为 <code>/var/lib/postgresql</code>；<br>执行 <code>psql</code> 命令进入 PostgreSQL 命令控制台：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">psql (9.5.3)</div><div class="line">Type &quot;help&quot; for help.</div><div class="line"></div><div class="line">postgres=#</div></pre></td></tr></table></figure>
<p>PostgreSQL 除了创建新的 Linux 用户 <code>postgres</code>，还创建了同样名为 <code>postgres</code> 数据库用户和同名数据库。在 PostgreSQL 控制台里为数据库用户 <code>postgres</code> 创建密码，<code>\password postgres</code>。<br>当然也可以为单独创建一个数据库用户，通过 <code>postgres</code> Linux 用户新建和 Linux 用户名相同的数据库用户，并设定该用户为 superuser，使其具备数据库的读写权限。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">postgres@Dev:~$ createuser --interactive</div></pre></td></tr></table></figure>
<p>反之，如果要删除数据库用户，执行 <code>dropuser</code>。</p>
<p>同上，再为新建的数据库用户设置密码。这样，在使用 PostgreSQL 数据库 shell 时就无需切换到 <code>postgres</code> 用户了，可以直接在当前 Linux 用户下执行一系列 PostgreSQL 的操作，如新建数据库 <code>createdb</code> 命令等。</p>
<p>上面提到的各种用户名都快要绕晕了。梳理一遍，Linux 用户 <code>postgres</code> 和数据库用户 <code>postgres</code> 是完全同的两个概念。Linux 用户是用来连接数据库的，而数据库用户是用来完成数据库的管理任务。对 PostgreSQL 而言，数据库用户和 Linux 用户是彼此对应的，Linux 用户默认连接与其同名的数据库。例如，Linux 用户 <code>postgres</code> 执行 <code>psql</code> 默认会连接到 <code>postgres</code> 数据库用户下的 <code>postgres</code> 数据库；同样的，如果已经创建和当前 Linux 用户同名的数据库用户 <code>${USER}</code>，那么执行 <code>psql</code> 会尝试连接名为 <code>${USER}</code> 的数据库。</p>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>创建 PostgreSQL 数据库的操作很简单，<code>createdb mytestdb</code>；连接到指定数据库，<code>psql mytestdb</code>，就进入到 PostgreSQL 客户端控制台，大致罗列几个常用命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">psql (9.5.3)</div><div class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> help.</div><div class="line"></div><div class="line">mytestdb=<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>将数据库的所有权限赋予给数据库用户</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">ON</span> mytestdb.* <span class="keyword">TO</span> dbuser;</div></pre></td></tr></table></figure>
<p>在控制台里输入 <code>\h</code> 查看所有可使用命令的帮助文档，或者指定要查询的命令 <code>\h command</code>。</p>
<h4 id="配置本地访问"><a href="#配置本地访问" class="headerlink" title="配置本地访问"></a>配置本地访问</h4><p>默认设置下，PostgreSQL 的数据库连接会在当前系统用户拥有该数据库权限的情况下被被认证通过。当特定系统用户在系统本地运行程序时会很实用，但如果需要更安全的配置，就要通过验证密码来访问数据库。</p>
<p>先切换到 Linux 用户 <code>postgres</code>，修改配置文件 <code>/etc/postgresql/9.x/main/pg_hba.conf</code>，在 <code># &quot;local&quot; is for Unix domain socket connections only</code> 这行可以见到如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># &quot;local&quot; is for Unix domain socket connections only</div><div class="line">local    all        all             peer</div></pre></td></tr></table></figure>
<p>将认证方式 <code>peer</code> 替换为 <code>md5</code>。切换回自己的系统用户，重启 PostgreSQL 服务。现在，如果想在 <code>postgres</code> 用户下，尝试用数据库用户 <code>${USER}</code> 连接测试数据库 <code>testdb</code>，就需要输入密码了。</p>
<p>或者可以在 “# IPv4 local connections:# IPv4 local connections:” 处，将访问 IP 白名单从 127.0.0.1/32 改为授权所有访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># IPv4 local connections:</div><div class="line">host    all             all              0.0.0.0/0              md5</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">postgres@Dev:~$ psql -U sudoz -W testdb</div><div class="line">Password <span class="keyword">for</span> user sudoz:</div></pre></td></tr></table></figure>
<h4 id="配置远程访问"><a href="#配置远程访问" class="headerlink" title="配置远程访问"></a>配置远程访问</h4><p>默认配置的 PostgreSQL 会监听来自 <code>localhost</code> 的访问连接，但它不建议修改配置去监听来自公网 IP 的连接。如果需要同图形化的工具来远程访问服务器上的 PostgreSQL 数据库，就得修改配置文件 <code>/etc/postgresql/9.x/main/postgresql.conf</code>，当然，也需要切换到 <code>postgres</code> 系统用户去操作，因为这些配置文件的所属用户和组都是 <code>postgres</code> 的。修改 <code>listen_addresses = &#39;localhost&#39;</code> 行，默认设置是只监听本地，把 <code>localhost</code> 替换为 <code>*</code>，或者添加指定 IP 地址，<code>localhost,my_remote_server_ip_address</code>，就可以将远程访问加入白名单中。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">listen_addresses = <span class="string">'*'</span>    <span class="comment"># what IP address(es) to listen on;</span></div><div class="line">                          <span class="comment"># comma-separated list of addresses;</span></div><div class="line">                          <span class="comment"># defaults to 'localhost'; use '*' for all</span></div><div class="line">                          <span class="comment"># (change requires restart)</span></div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="常用控制台命令"><a href="#常用控制台命令" class="headerlink" title="常用控制台命令"></a>常用控制台命令</h4><p>由 <code>psql</code> 进入到 PostgreSQL 客户端控制台，大致罗列几个常用命令：</p>
<ul>
<li><code>\?</code> 查看全部 psql 命令</li>
<li><code>\h</code> 查看全部 SQL 命令或指定的 SQL 命令</li>
<li><code>\q</code> 退出 psql 控制台，退回到 Linux shell（Ctrl + d 作用相同）</li>
<li><code>\l</code> 列出全部数据库</li>
<li><code>\c</code> 连接到其他数据库，命令后跟数据库名</li>
<li><code>\d</code> 列出当前数据库下所有数据表</li>
<li><code>\dp</code> 列出所有访问权限</li>
<li><code>\du</code> 列出所有用户以及他们的权限</li>
<li><code>\dt</code> 展示当前数据库中所有表相关的汇总信息</li>
<li><code>\password</code> 修改指定数据库用户的密码</li>
<li><code>\conninfo</code> 查看当前数据库和连接信息</li>
</ul>
<h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>和 MySQL 支持扩展的 SQL 标准不同，PostgreSQL 严格遵循完备的 ANSI-SQL 标准，因此 PostgreSQL 的数据库操作规范且通用。下面就写几条常用的 SQL 语句。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 创建新表</div><div class="line">CREATE TABLE playground (</div><div class="line">    equip_id serial PRIMARY KEY,</div><div class="line">    type varchar (50) NOT NULL,</div><div class="line">    color varchar (25) NOT NULL,</div><div class="line">    location varchar(25) check (location in ('north', 'south', 'west', 'east', 'northeast', 'southeast', 'southwest', 'northwest')),</div><div class="line">    install_date date</div><div class="line">);</div><div class="line"># 插入数据</div><div class="line">INSERT INTO playground (type, color, location, install_date) VALUES ('slide', 'blue', 'south', '2014-04-28');</div><div class="line"># 选择记录</div><div class="line">SELECT * FROM playground;</div><div class="line"># 更新数据</div><div class="line">UPDATE playground set color = 'blue' WHERE equip_id = 1;</div><div class="line"># 删除记录</div><div class="line">DELETE FROM playground WHERE type = 'slide';</div><div class="line"># 添加栏位</div><div class="line">ALTER TABLE playground ADD email VARCHAR(40);</div><div class="line"># 更新结构</div><div class="line">ALTER TABLE playground ALTER COLUMN email SET NOT NULL;</div><div class="line"># 更名栏位</div><div class="line">ALTER TABLE playground RENAME COLUMN email TO mail;</div><div class="line"># 删除栏位</div><div class="line">ALTER TABLE playground DROP COLUMN email;</div><div class="line"># 表格更名</div><div class="line">ALTER TABLE playground RENAME TO ground;</div><div class="line"># 删除表格</div><div class="line">DROP TABLE IF EXISTS ground;</div></pre></td></tr></table></figure>
<p>好啦，PostgreSQL 初级入门就写到这，后续开发过程中会总结更多使用经验，持续更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始做的一个课余项目用 Flask + PostgreSQL + Bootstrap 快速开发。之前本地开发和生产部署都用 &lt;a href=&quot;https://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt;，而 &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; 是关系型数据库阵营中的另一大高手。这俩的口号放在一起看相当好玩。&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://isudox.com/categories/Database/"/>
    
    
      <category term="PostgreSQL" scheme="http://isudox.com/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 主题美化</title>
    <link href="http://isudox.com/2016/07/14/customize-hexo-theme/"/>
    <id>http://isudox.com/2016/07/14/customize-hexo-theme/</id>
    <published>2016-07-14T08:01:06.000Z</published>
    <updated>2016-08-25T10:50:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>小站有段时间没折{no}腾{zuo}前{no}端{die}了，在浏览别的个人站时总会时不时被里面的设计吸引到，最近闲着没事干，就把别人的主题抄袭过来，嘿嘿。</p>
<a id="more"></a>
<h3 id="头像旋转"><a href="#头像旋转" class="headerlink" title="头像旋转"></a>头像旋转</h3><p><a href="https://github.com/A-limon/pacman" target="_blank" rel="external">Pacman</a> 主题布局非常大气，最有心的设计在我看来就是底栏的可旋转的圆形头像，非常可爱。相比之下，鄙人小站侧边栏头像就显得很呆板了。那就抄过来！<br>可以知道，这是一个鼠标的 <code>hover</code> 事件，因此先找到位于 <code>source/css/_common/components/sidebar/sidebar-author.syl</code> 模板文件里侧边栏头像的样式 <code>.site-author-image</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">padding</span>: $site-author-image-padding;</div><div class="line">    <span class="attribute">max-width</span>: $site-author-image-width;</div><div class="line">    <span class="attribute">height</span>: $site-author-image-height;</div><div class="line">    <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先要做的事就是把原头像图通过 css 样式改成圆形头像。通过修改 <code>border-radius</code> 属性就可以改图片四个角的圆角程度。另外针对不同内核的浏览器也能分别指定。再加上属性变化的动画效果 <code>transition</code>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transition</span>: <span class="number">1.4s</span> all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>圆角效果完成后，再做 <code>hover</code> 动作。添加 <code>.site-author-image:hover</code> 样式，由 <code>rotate()</code> 方法实现，旋转 360°</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">    <span class="attribute">-transform</span>: <span class="built_in">rotate</span>(360deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，成就达成。</p>
<h3 id="侧边滚动条"><a href="#侧边滚动条" class="headerlink" title="侧边滚动条"></a>侧边滚动条</h3><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia</a> 也是 GitHub 上非常受欢迎的一款 Hexo 主题， 虽然我用的不是 Yilia 主题，但是不妨碍我喜欢它的侧边滚动条，灰色系的性冷淡风很契合我的小站。所以我就把这个样式挪到了我的小站里。<br>为了不影响小站原主题的样式，最好不要直接在原有样式上做修改。在 <code>source/css/_custom</code> 里的 <code>custom.stl</code> 模板文件里编写对滚动条的自定义样式。不过有一点，自定义的滚动条只支持 webkit 内核的浏览器，比如 Firefox 和 IE 就爱莫能助了。当然，在 Chrome 上的体验完美！</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// Custom styles.</div><div class="line">::-webkit-scrollbar &#123;</div><div class="line">  width: 10px;</div><div class="line">	height: 10px;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button &#123;</div><div class="line">	width: 0;</div><div class="line">	height: 0;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:start:increment,::-webkit-scrollbar-button:end:decrement &#123;</div><div class="line">	display: none;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-corner &#123;</div><div class="line">	display: block;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-thumb &#123;</div><div class="line">	border-radius: 8px;</div><div class="line">	background-color: rgba(0,0,0,.2);</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-thumb:hover &#123;</div><div class="line">	border-radius: 8px;</div><div class="line">	background-color: rgba(0,0,0,.5);</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-track,::-webkit-scrollbar-thumb &#123;</div><div class="line">	border-right: 1px solid transparent;</div><div class="line">	border-left: 1px solid transparent;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-track:hover &#123;</div><div class="line">	background-color: rgba(0,0,0,.15);</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:start &#123;</div><div class="line">	width: 10px;</div><div class="line">	height: 10px;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat 0 0;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:start:hover &#123;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat -15px 0;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:start:active &#123;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat -30px 0;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:end &#123;</div><div class="line">	width: 10px;</div><div class="line">	height: 10px;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat 0 -18px;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:end:hover &#123;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat -15px -18px;</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-button:end:active &#123;</div><div class="line">	background: url(../images/scrollbar_arrow.png) no-repeat -30px -18px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前后对比<br><img src="https://o70e8d1kb.qnssl.com/scrollbars.png" alt=""></p>
<h3 id="顶部阅读进度条"><a href="#顶部阅读进度条" class="headerlink" title="顶部阅读进度条"></a>顶部阅读进度条</h3><p>阅读进度条的宽度是随着页面上下滚动而变化的。当滚动条在顶部时，阅读进度条宽度为浏览器宽度的 0%，当滚动条在页面底部时，阅读进度条宽度为浏览器宽度的 100%。很简单，写好进度条的样式和高度计算的脚本就能轻松实现。<br>先在 <code>layout/_partials/header.swig</code> 模板文件里加上进度条的 div：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-scroll-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在自定义样式文件 <code>source/css/_custom/custom.styl</code> 中加上 <code>.top-scroll-bar</code> 的样式，还是一如既往采用克制的灰色系：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.top-scroll-bar</span> &#123;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#6d6d6d</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在新建自定义的 js 脚本文件 <code>source/js/src/custom/custom.js</code>，计算当前高度的百分比：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".top-scroll-bar"</span>).attr(<span class="string">"style"</span>, <span class="string">"width: "</span> + ($(<span class="keyword">this</span>).scrollTop() / ($(<span class="built_in">document</span>).height() - $(<span class="keyword">this</span>).height()) * <span class="number">100</span>) + <span class="string">"%; display: block;"</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>再在 <code>layout/_scripts/commons.swig</code> 中把该文件引入进页面的模板中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;%</div><div class="line">  set js_commons = [</div><div class="line">    &apos;src/utils.js&apos;,</div><div class="line">    &apos;src/motion.js&apos;,</div><div class="line">    &apos;src/custom/custom.js&apos;</div><div class="line">  ]</div><div class="line">%&#125;</div><div class="line"></div><div class="line">&#123;% for common in js_commons %&#125;</div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.js) &#125;&#125;/&#123;&#123; common &#125;&#125;?v=&#123;&#123; theme.version &#125;&#125;&quot;&gt;&lt;/script&gt;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
<p>测试下，可以看到页面顶部出现了一道性感的阅读进度条。</p>
<h3 id="页面加载进度条"><a href="#页面加载进度条" class="headerlink" title="页面加载进度条"></a>页面加载进度条</h3><p>前一段时间 GitHub 做了一次较大的更新，个人页面的连续 commit 提交天数被去掉了，还有在打开仓库文件时可以看到页面顶部增加了一条发光发亮的加载进度条。通过 Chrome 控制台可以看到，这条加载进度条是由下面的 HTML 代码展示的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"js-pjax-loader-bar"</span> <span class="attr">class</span>=<span class="string">"pjax-loader-bar"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span> <span class="attr">style</span>=<span class="string">"width: 100%;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>思路跟上面的阅读进度条一样。不过需要更改计算进度条宽度的依据，根据资源加载的完成度来改变进度条的宽度，并且当宽度为 100% 时自动隐藏。GitHub 上已经有轮子可用，就是 <a href="https://github.com/rstacruz/nprogress" target="_blank" rel="external">nprogress</a>，提供了 <code>nprogress.css</code> 和 <code>nprogress.js</code> 两个文件。因为是第三方的库，所以把这两个文件加进 <code>source/vendor/nprogress/</code> 目录下。<br>在 <code>layout/_partials/head.swig</code> 模板中加入 <code>nprogress.css</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% set nprogress_uri = url_for(theme.vendors._internal + &apos;/nprogress/nprogress.css&apos;) %&#125;</div><div class="line">&lt;link href=&quot;&#123;&#123; nprogress_uri &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</div></pre></td></tr></table></figure>
<p>在 <code>layout/_scripts/vendors.swig</code> 模板中加入 <code>nprogress.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% set js_vendors.nprogress   = &apos;nprogress/nprogress.js&apos; %&#125;</div></pre></td></tr></table></figure>
<p>这样就完成了对 nprogress 样式和脚本的引入。在 <code>custom.js</code> 里加入页面加载进度条的脚本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 页面加载进度条</span></div><div class="line">    NProgress.start();</div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        NProgress.done();</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>大功告成 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小站有段时间没折{no}腾{zuo}前{no}端{die}了，在浏览别的个人站时总会时不时被里面的设计吸引到，最近闲着没事干，就把别人的主题抄袭过来，嘿嘿。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Hexo" scheme="http://isudox.com/tags/Hexo/"/>
    
      <category term="Frontend" scheme="http://isudox.com/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 探险第五弹</title>
    <link href="http://isudox.com/2016/07/08/leetcode-tour-5/"/>
    <id>http://isudox.com/2016/07/08/leetcode-tour-5/</id>
    <published>2016-07-08T13:25:43.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录 LeetCode 算法部分第 21 至 25 题。</p>
<a id="more"></a>
<h3 id="Merge-Two-Sorted-Lists"><a href="#Merge-Two-Sorted-Lists" class="headerlink" title="Merge Two Sorted Lists"></a>Merge Two Sorted Lists</h3><p>第 21 题 <a href="https://leetcode.com/problems/merge-two-sorted-lists/" target="_blank" rel="external">Merge Two Sorted Lists</a></p>
<blockquote>
<p>将两个有序链表合并成一个新的有序链表。</p>
</blockquote>
<p>题目不复杂，取两个指针分别往下遍历两个链表的每个节点，逐次指向节点的值，取其较小值，并移动该指针，另一指针不动。继续往下比较，知道其中有一个指针到达末端为止。<br>循环解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MergeTwoSortedLists.java v1.0</span></div><div class="line"><span class="comment">// Definition for singly-linked list.</span></div><div class="line"><span class="comment">// public class ListNode &#123;</span></div><div class="line"><span class="comment">//     int val;</span></div><div class="line"><span class="comment">//     ListNode next;</span></div><div class="line"><span class="comment">//     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode temp = res;</div><div class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</div><div class="line">                temp.next = l1;</div><div class="line">                l1 = l1.next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp.next = l2;</div><div class="line">                l2 = l2.next;</div><div class="line">            &#125;</div><div class="line">            temp = temp.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) temp.next = l2;</div><div class="line">        <span class="keyword">else</span> temp.next = l1;</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>递归解法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MergeTwoSortedLists.java v1.1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        pickListNode(l1, l2, res);</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pickListNode</span><span class="params">(ListNode l1, ListNode l2, ListNode res)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span> || l2 == <span class="keyword">null</span>) &#123;</div><div class="line">            res.next = l1 == <span class="keyword">null</span> ? l2 : l1;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</div><div class="line">            res.next = l1;</div><div class="line">            l1 = l1.next;</div><div class="line">            pickListNode(l1, l2, res.next);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.next = l2;</div><div class="line">            l2 = l2.next;</div><div class="line">            pickListNode(l1, l2, res.next);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">208 / 208</td>
<td style="text-align:center">1 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Generate-Parentheses"><a href="#Generate-Parentheses" class="headerlink" title="Generate Parentheses"></a>Generate Parentheses</h3><p>第 22 题 <a href="https://leetcode.com/problems/generate-parentheses/" target="_blank" rel="external">Generate Parentheses</a></p>
<blockquote>
<p>给定 n 对括号，编写方法生成所有可能的有效组合形式。<br>例如，n = 3，所有的组合情况为：[ “((()))”, “(()())”, “(())()”, “()(())”, “()()()” ]</p>
</blockquote>
<p>这题很容易想起之前做过的第 20 题 <a href="/2016/07/04/leetcode-tour-4/#Valid-Parentheses">Valid Parentheses</a>，当时利用了栈的 FILO 特性去检验括号组合的有效性。一个很直接的想法就是枚举全部的组合，然后传给 Valid Parentheses 方法去做有效性检验。但是这种方法平方级的时间复杂度太高，因为要判断所有组合。<br>n + 1 对括号的组合，可以发现，其实就是将新增的一对括号和之前的 n 对括号的组合拼起来。因此这里就可以利用递归的思想。<br>n 对括号组合，就需要把 n 个 <code>&quot;(&quot;</code> 和 n 个 <code>&quot;)&quot;</code> 插入进字符串中。而且从左往右，<code>&quot;(&quot;</code> 的数量一定不少于 <code>&quot;)&quot;</code> 才能使得组合有效，换句话说，就是只有在待插入的 <code>&quot;)&quot;</code>的数量大于待插入的 <code>&quot;(&quot;</code> 数量时，才需要往字符串中插入 <code>&quot;)&quot;</code>。当待插入的括号数量为零时，结束递归，将所得括号字符串添加进列表里。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// GenerateParentheses.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">        recursive(list, <span class="string">""</span>, n, n);</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recursive</span><span class="params">(List&lt;String&gt; result, String paren, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</div><div class="line">            result.add(paren);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</div><div class="line">            recursive(result, paren + <span class="string">"("</span>, left - <span class="number">1</span>, right);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (right &gt; <span class="number">0</span> &amp;&amp; left &lt; right) &#123;</div><div class="line">            recursive(result, paren + <span class="string">")"</span>, left, right - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">8 / 8</td>
<td style="text-align:center">2 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Merge-k-Sorted-Lists"><a href="#Merge-k-Sorted-Lists" class="headerlink" title="Merge k Sorted Lists"></a>Merge k Sorted Lists</h3><p>第 23 题 <a href="https://leetcode.com/problems/merge-k-sorted-lists/" target="_blank" rel="external">Merge k Sorted Lists</a></p>
<blockquote>
</blockquote>
<hr>
<h3 id="Swap-Nodes-in-Pairs"><a href="#Swap-Nodes-in-Pairs" class="headerlink" title="Swap Nodes in Pairs"></a>Swap Nodes in Pairs</h3><p>第 24 题 <a href="https://leetcode.com/problems/swap-nodes-in-pairs/" target="_blank" rel="external">Swap Nodes in Pairs</a></p>
<blockquote>
<p>给定一个 Linked list，两两交换相邻节点，返回该链表。<br>例如，给定的链表为 <code>1 -&gt;2 -&gt; 3 -&gt; 4</code>，返回结果为 <code>2 -&gt; 1 -&gt; 4 -&gt; 3</code>。</p>
</blockquote>
<p>首先需要新建一个 ListNode 保存给定 ListNode 的头指针,这样在交换相邻节点时,该指针位置能保持固定不动。此外还需要另一个 ListNode 作为移动的指针来交换相邻节点，因此还需要创建两个临时的 ListNode，一左一右作交换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SwapNodesInPairs.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next;</div><div class="line">        ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode curNode = res;</div><div class="line">        res.next = head;</div><div class="line">        <span class="keyword">while</span> (curNode.next != <span class="keyword">null</span> &amp;&amp; curNode.next.next != <span class="keyword">null</span>) &#123;</div><div class="line">            ListNode l = curNode.next, r = curNode.next.next;</div><div class="line">            curNode.next = r;</div><div class="line">            l.next = r.next;</div><div class="line">            r.next = l;</div><div class="line">            curNode = l;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">55 / 55</td>
<td style="text-align:center">0 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Merge-Reverse-Nodes-in-k-Group"><a href="#Merge-Reverse-Nodes-in-k-Group" class="headerlink" title="Merge Reverse Nodes in k-Group"></a>Merge Reverse Nodes in k-Group</h3><p>第 25 题 <a href="https://leetcode.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="external">Reverse Nodes in k-Group</a></p>
<blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MergeReverseNodesInKGroup.java</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录 LeetCode 算法部分第 21 至 25 题。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Algorithm" scheme="http://isudox.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://isudox.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 集成 Thymeleaf</title>
    <link href="http://isudox.com/2016/07/06/integrating-thymeleaf-with-spring-mvc/"/>
    <id>http://isudox.com/2016/07/06/integrating-thymeleaf-with-spring-mvc/</id>
    <published>2016-07-06T07:25:45.000Z</published>
    <updated>2016-08-19T09:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在狗厂，我所接触的项目里，Spring 的视图解析器采用最广泛的就是 <a href="http://velocity.apache.org/" target="_blank" rel="external">Velocity</a>。最近也一直在想前后端分离的事，略显古老的 Velocity 并不是前后端分离的好选择。还好，近几年 Java Web 诞生了一款新的视图解析器——“百里香叶” <a href="http://www.thymeleaf.org/" target="_blank" rel="external">Thymeleaf</a>，就像它的名字一样美妙。</p>
<a id="more"></a>
<p>和 Velocity 类似，Thymeleaf 支持通过 <code>@Controller</code> 注解的映射方法返回模板名称；模板支持 Spring Expression Language；支持在模板中创建表单，表单验证。（这就比较像 Jinja2 了）。</p>
<h2 id="模板标准方言"><a href="#模板标准方言" class="headerlink" title="模板标准方言"></a>模板标准方言</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>Thymeleaf 的模板标准语言中绝大多数 processors 都是 attribute processors，这就意味着浏览器可以正常地表现 XHTML/HTML5 模板文件，即使是在模板引擎没有加载的情况下，因为浏览器会忽略额外的 attribute。这就是 Thymeleaf 比前辈 JSP 厉害的地方之一。来看下面的 input 标签，JSP 里会加入浏览器无法直接识别的代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form:inputText</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>而 Thymeleaf 模板标准语言会这样写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"James Carrot"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;user.name&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>浏览器能直接识别上述 Thymeleaf 的 input 标签，而且还能在加载模板引擎后，由后端返回的数据渲染 value 值。也就是这一特性，可以让前后端工程师在同一个模板文件上协作开发，避免了从静态页面到模板页面的转换，前后端并行开发，这就是未来的趋势，也被称作 Natural Templating，页面即模板，模板即页面。</p>
<h3 id="标准表达式语法"><a href="#标准表达式语法" class="headerlink" title="标准表达式语法"></a>标准表达式语法</h3><h4 id="基本表达式"><a href="#基本表达式" class="headerlink" title="基本表达式"></a>基本表达式</h4><p>Thymeleaf 模板方言里最重要的就是它的标准表达式语法了。Thymeleaf 的表达式有：</p>
<ul>
<li><p>简单表达式：</p>
<ul>
<li>变量表达式：<code>${...}</code></li>
<li>选择变量表达式：<code>*{...}</code></li>
<li>消息表达式：<code>#{...}</code></li>
<li>URL 表达式：<code>@{...}</code></li>
</ul>
</li>
<li><p>字面值表达式：</p>
<ul>
<li>文本：’ABC’, ‘你好’</li>
<li>数字：0, 1, 2.0, 12.3</li>
<li>布尔值：<code>true</code>, <code>false</code></li>
<li>Null：<code>null</code></li>
<li>字面值 token：<code>one</code>, <code>sometext</code>, <code>main</code></li>
</ul>
</li>
<li><p>算术操作：</p>
<ul>
<li>二元：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></li>
<li>一元：<code>-</code></li>
</ul>
</li>
<li><p>布尔运算符：</p>
<ul>
<li>二元：<code>and</code>, <code>or</code></li>
<li>一元：<code>!</code>, <code>not</code></li>
</ul>
</li>
<li><p>比较运算符：</p>
<ul>
<li>不等比较：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> (<code>gt</code>, <code>lt</code>, <code>ge</code>, <code>le</code>)</li>
<li>相等比较：<code>==</code>, <code>!=</code> (<code>eq</code>, <code>ne</code>)</li>
</ul>
</li>
<li><p>条件运算符：</p>
<ul>
<li>If-then: <code>(if) ? (then)</code></li>
<li>If-then-else: <code>(if) ? (then) : (else)</code></li>
<li>Default: <code>(value) ?: (default_value)</code></li>
</ul>
</li>
</ul>
<p>参考如下模板代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;User is of type &apos; + ($&#123;user.isAdmin()&#125; ? &apos;Administrator&apos; : ($&#123;user.type&#125; ?: &apos;Unknown&apos;))</div></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量表达式 <code>${...}</code> 会把模板 context 内保存的变量解释出来。例如下面的表达式中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Today is: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;today&#125;"</span>&gt;</span>13 August 2016<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实际上是执行了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.getVariables().get(<span class="string">"today"</span>);</div></pre></td></tr></table></figure>
<p>复合结构的变量：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">"#&#123;home.welcome($&#123;session.user.name&#125;)&#125;"</span>&gt;</span></div><div class="line">  Welcome to our grocery store, Sebastian Pepper!</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>变量执行的代码是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((User) ctx.getVariables().get(<span class="string">"session"</span>).get(<span class="string">"user"</span>)).getName();</div></pre></td></tr></table></figure>
<p><code>getter</code> 方法只是其中一个功能，变量表达式就像 Python 一样极富表现力：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过 `.` 符访问变量属性值</span></div><div class="line">$&#123;person.father.name&#125;</div><div class="line"></div><div class="line"><span class="comment">// 通过 `[]` 符访问变量属性值</span></div><div class="line">$&#123;person[<span class="string">'father'</span>][<span class="string">'name'</span>]&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果对象是一个字典，则 `.` 和 `[]` 都能执行 `get(...)` 方法</span></div><div class="line">$&#123;countriesByCode.ES&#125;</div><div class="line">$&#123;personsByName[<span class="string">'Stephen Zucchini'</span>].age&#125;</div><div class="line"></div><div class="line"><span class="comment">// 访问数组元素</span></div><div class="line">$&#123;personsArray[<span class="number">0</span>].name&#125;</div><div class="line"></div><div class="line"><span class="comment">// 访问方法</span></div><div class="line">$&#123;person.createCompleteName()&#125;</div><div class="line">$&#123;person.createCompleteNameWithSeparator(<span class="string">'-'</span>)&#125;</div></pre></td></tr></table></figure>
<p>另外，<code>*{...}</code> 也是取变量的表达式，两者的区别是：<code>*{...}</code> 会从选定的对象中匹配，而 <code>${...}</code> 是从整个 context 中去匹配。当未指定对象的前提下，二者的作用是一样的。参考下面的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"*&#123;nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>就等同于</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.firstName&#125;"</span>&gt;</span>Sebastian<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Surname: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.lastName&#125;"</span>&gt;</span>Pepper<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nationality: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.nationality&#125;"</span>&gt;</span>Saturn<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>URL 是变量之外的另一个要点，由 <code>@{...}</code> 表达式解释，通过标签 <code>th:href</code> 或 <code>th:src</code> 指定。参见下面的示例代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 绝对路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 相对路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述表达式中，orderId=${o.id} 是作为 URL 的参数，多个参数也是类似如此。</p>
<h4 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h4><p>字面值很简单，就是做字面内容的替换，包括文本、数字、布尔值、空值 null。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 文本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Now you are looking at a <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'working web application'"</span>&gt;</span>template file<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数字 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The year is <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2016"</span>&gt;</span>1984<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>In two years, it will be <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"2013 + 3"</span>&gt;</span>1494<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 布尔 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user.isAdmin()&#125; == false"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- null --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;variable.something&#125; == null"</span>&gt;</span> ...</div></pre></td></tr></table></figure>
<h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p>有时候需要动态的改变文本的某一段内容，这就需要用到拼接和替换：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'The name of the user is ' + $&#123;user.name&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- || 符号内的字符做拼接处理，效果同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;onevar&#125; + ' ' + |$&#123;twovar&#125;, $&#123;threevar&#125;|"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="运算-比较操作符"><a href="#运算-比较操作符" class="headerlink" title="运算 / 比较操作符"></a>运算 / 比较操作符</h4><p>基础的运算符包括加减乘除取余，比较操作符中由于存在 <code>&gt;</code> 和 <code>&lt;</code>，所以需要转义处理：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:with</span>=<span class="string">"isEven=($&#123;prodStat.count&#125; % 2 == 0)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;prodStat.count&#125; &amp;gt; 1"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"'Execution mode is ' + ( ($&#123;execMode&#125; == 'dev')? 'Development' : 'Production')"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="属性标签"><a href="#属性标签" class="headerlink" title="属性标签"></a>属性标签</h3><p>前面提到了一些不属于 HTML 规范的属性标签，这都是 Thymeleaf 自定义的，通过这些属性标签来设置 HTML 标签的属性。</p>
<h4 id="设置任意属性"><a href="#设置任意属性" class="headerlink" title="设置任意属性"></a>设置任意属性</h4><p>Thymeleaf 的 <code>th:attr</code> 属性标签可以对 HTML 中任意属性值进行设置。例如 <code>th:attr=&quot;action=abc&quot;</code> 是对 <code>action</code> 属性的设置；<code>th:attr=&quot;value=xyz</code> 是对 <code>value</code> 属性的设置。示例代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:attr</span>=<span class="string">"action=@&#123;/subscribe&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe me!"</span> <span class="attr">th:attr</span>=<span class="string">"value=#&#123;subscribe.submit&#125;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="设置指定属性"><a href="#设置指定属性" class="headerlink" title="设置指定属性"></a>设置指定属性</h4><p>除了上面的通用型属性标签外，Thymeleaf 还自定义了其他的特定属性标签。如 <code>th:attr</code> 标签指定 <code>attr</code> 属性；<code>th:value</code> 指定 <code>value</code> 标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Subscribe me!"</span> <span class="attr">th:value</span>=<span class="string">"#&#123;subscribe.submit&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"subscribe.html"</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/subscribe&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"product/list.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/product/list&#125;"</span>&gt;</span>Product List<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<p>还有许多其他的 <code>th:*</code> 自定义标签，都是和 HTML 标签一一对应，这里不逐个例举了。</p>
<h4 id="同时设置多个属性"><a href="#同时设置多个属性" class="headerlink" title="同时设置多个属性"></a>同时设置多个属性</h4><p>如果需要 Thymeleaf 动态设置多个属性，可以像上面一样依次指定，也可以同时指定，不同属性通过 <code>-</code>  连接：<code>th:alt-title</code> 同时设置 <code>alt</code> 和 <code>title</code> 属性； <code>th:lang-xmllang</code> 同时设置 <code>lang</code> 和 <code>xml:lang</code> 属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 依次指定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span></span></div><div class="line">     <span class="attr">th:attr</span>=<span class="string">"src=@&#123;/images/gtvglogo.png&#125;,title=#&#123;logo&#125;,alt=#&#123;logo&#125;"</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span> </span></div><div class="line">     <span class="attr">th:src</span>=<span class="string">"@&#123;/images/gtvglogo.png&#125;"</span> <span class="attr">th:title</span>=<span class="string">"#&#123;logo&#125;"</span> <span class="attr">th:alt</span>=<span class="string">"#&#123;logo&#125;"</span> /&gt;</div><div class="line"><span class="comment">&lt;!-- 同时指定 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../images/gtvglogo.png"</span> </span></div><div class="line">     <span class="attr">th:src</span>=<span class="string">"@&#123;/images/gtvglogo.png&#125;"</span> <span class="attr">th:alt-title</span>=<span class="string">"#&#123;logo&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="前置和后置"><a href="#前置和后置" class="headerlink" title="前置和后置"></a>前置和后置</h4><p>有些情况下,可能需要改变属性的一部分值,比如 DOM 节点样式属性中的某个样式，这就需要在已有属性的基础上前置或后置新的属性。对此，Thymeleaf 提供了 <code>th:attrappend</code> 和 <code>th:attrprepend</code> 属性标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Do it!"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:attrappend</span>=<span class="string">"class=$&#123;' ' + cssStyle&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>前端页面里经常会用到表格，像 Bootstrap 中就专门有 DataTable 来处理表格的渲染。Thymeleaf 的 <code>th:each</code> 属性标签实现了对表格 DOM 下各个 <code>&lt;tr&gt;</code> 元素的迭代渲染，类似 Python 中的 <code>for in</code> 用法。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>NAME<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>PRICE<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>IN STOCK<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"prod : $&#123;prods&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.name&#125;"</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.price&#125;"</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;prod.inStock&#125;? #&#123;true&#125; : #&#123;false&#125;"</span>&gt;</span>yes<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>Thymeleaf 的条件表达式包括 <code>if</code>，<code>unless</code> 和 <code>switch</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span></span></div><div class="line">   <span class="attr">th:href</span>=<span class="string">"@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;"</span> </div><div class="line">   <span class="attr">th:if</span>=<span class="string">"$&#123;not #lists.isEmpty(prod.comments)&#125;"</span>&gt;view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码中，如果条件标签 <code>th:if</code> 的结果为真，则显示 <code>a</code> 标签的内容，否则不显示。<br><code>th:if</code> 判 true 的情况有：</p>
<ul>
<li>布尔值 true</li>
<li>非零数字</li>
<li>非零字符</li>
<li>除 “false” “off” “no” 以外的字符串</li>
<li>布尔值、数字、字符、字符串之外的变量形式</li>
</ul>
<p><code>th:unless</code> 的用法正好和 <code>th:if</code> 相反，要实现和上面代码一样的作用，<code>th:unless</code> 会这样写：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"comments.html"</span></span></div><div class="line">   <span class="attr">th:href</span>=<span class="string">"@&#123;/comments(prodId=$&#123;prod.id&#125;)&#125;"</span> </div><div class="line">   <span class="attr">th:unless</span>=<span class="string">"$&#123;#lists.isEmpty(prod.comments)&#125;"</span>&gt;view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>th:switch</code> 和多数编程语言的 switch-case 用法是很类似的，其中 default 情况的表达式是 <code>th:case=&quot;*&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'admin'"</span>&gt;</span>User is an administrator<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"#&#123;roles.manager&#125;"</span>&gt;</span>User is a manager<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>User is some other thing<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="块和引用"><a href="#块和引用" class="headerlink" title="块和引用"></a>块和引用</h3><p>如果用过 Python 的优秀模板 Jinja2 的话，一定会对 Jinja2 的 <code>block</code> 印象深刻，因为这实现了模板的分块和复用，避免了大段代码的重复。Thymeleaf 同样也实现了这种优秀的特性，由标签 <code>th:fragment</code> 进行分块，<code>th:include</code> 进行引用。<br>下面是页面 footer.html 的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></div><div class="line">      &amp;copy; 2016 The Good Thymes Virtual Grocery</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在另外一个页面中同样需要 footer 中的版权信息，所以把名为 copy 的块引入进来：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>th:include=&quot;templatename::domselector&quot;</code> 指定了引入模板块所在文件名称和模板块的名称。</p>
<p>引用模板块不仅仅只是支持 Thymeleaf 自定义的 <code>th:fragment</code>，还支持 HTML 原生的 DOM 节点选择。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: #copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如上引入的就是 footer.html 中 id=copy 的 DOM。</p>
<p>另一个和 <code>th:include</code> 标签类似的是 <code>th:replace</code>，两者都能引入模板块，但区别是 <code>th:include</code> 是把模板块内的内容引入到 <code>th:include</code> 所在的 DOM 节点；<code>th:replace</code> 是把模板块整个引入到 <code>th:replace</code> 签所在 DOM 节点：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终渲染的结果如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery</div><div class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="集成-Thymeleaf"><a href="#集成-Thymeleaf" class="headerlink" title="集成 Thymeleaf"></a>集成 Thymeleaf</h2><p>大致梳理了下 Thymeleaf 的基础用法，接下来就把它集成到 Spring MVC 中。Thymeleaf 分别提供了 <a href="https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring3" target="_blank" rel="external">thymeleaf-spring3</a> 和 <a href="https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4" target="_blank" rel="external">thymeleaf-spring4</a> 来支持 Spring 3.x 和 Spring 4.x，下面以最新的 4.x 版本为例。</p>
<h3 id="设置模板引擎"><a href="#设置模板引擎" class="headerlink" title="设置模板引擎"></a>设置模板引擎</h3><p>首先需要把 Thymeleaf 配置为 Spring MVC 的模板引擎：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span></span></div><div class="line">       <span class="attr">class</span>=<span class="string">"org.thymeleaf.templateresolver.ServletContextTemplateResolver"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/templates/"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML5"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置内容很清晰，上述 xml 设置了模板文件所在路径，后缀名，因此 <code>@Controller</code> 下的方法只需要返回模板的名称，模板引擎就能通过路径和后缀名，拼接找到对应模板进行渲染。</p>
<h3 id="View-和-View-Resolver"><a href="#View-和-View-Resolver" class="headerlink" title="View 和 View Resolver"></a>View 和 View Resolver</h3><p>Thymeleaf 实现了 <code>org.thymeleaf.spring4.view.ThymeleafView</code> 和 <code>org.thymeleaf.spring4.view.ThymeleafViewResolver</code> 来替换 Spring 内置的视图解析。这两个类负责在 Thymeleaf 模板中处理 <code>@Controller</code> 方法执行的结果。配置 ViewResolver 如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewNames"</span> <span class="attr">value</span>=<span class="string">"*.html,*.xhtml"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，属性 <code>templateEngine</code> 引用了之前配置的模板引擎，<code>order</code> 属性设置了 ViewResolver 的处理优先级，这是可选的参数，在配置多视图解析器时会需要用到。这里对 <code>prefix</code> 和 <code>suffix</code> 属性进行设置，因为已经在 Template Resolver 中设置了。<br>如果需要定义一个 View 的 bean，并预置静态变量，也很简单：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafView"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticVariables"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"footer"</span> <span class="attr">value</span>=<span class="string">"Some company: &amp;lt;b&amp;gt;ACME&amp;lt;/b&amp;gt;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Spring-MVC-配置"><a href="#Spring-MVC-配置" class="headerlink" title="Spring MVC 配置"></a>Spring MVC 配置</h3><p>Spring MVC 的配置中除了指定 Template Engine 和 View Resolver 外，还需要指定标准的 Spring MVC artifacts，如静态文件的处理，注解的扫描：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/mvc</span></div><div class="line">                           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</div><div class="line">                           http://www.springframework.org/schema/beans</div><div class="line">                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">                           http://www.springframework.org/schema/context</div><div class="line">                           http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;</div><div class="line">    </div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line">  <span class="comment">&lt;!--  RESOURCE FOLDERS CONFIGURATION                                  --&gt;</span></div><div class="line">  <span class="comment">&lt;!--  Dispatcher configuration for serving static resources           --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/images/"</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mappijs</span>=<span class="string">"/js/**"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line">  <span class="comment">&lt;!--  SPRING ANNOTATION PROCESSING                                    --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"thymeleafexamples.stsm"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line">  <span class="comment">&lt;!--  THYMELEAF-SPECIFIC ARTIFACTS                                    --&gt;</span></div><div class="line">  <span class="comment">&lt;!--  TemplateResolver &lt;- TemplateEngine &lt;- ViewResolver              --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- **************************************************************** --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.thymeleaf.templateresolver.ServletContextTemplateResolver"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/templates/"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML5"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateEngine"</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">   </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"templateEngine"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在狗厂，我所接触的项目里，Spring 的视图解析器采用最广泛的就是 &lt;a href=&quot;http://velocity.apache.org/&quot;&gt;Velocity&lt;/a&gt;。最近也一直在想前后端分离的事，略显古老的 Velocity 并不是前后端分离的好选择。还好，近几年 Java Web 诞生了一款新的视图解析器——“百里香叶” &lt;a href=&quot;http://www.thymeleaf.org/&quot;&gt;Thymeleaf&lt;/a&gt;，就像它的名字一样美妙。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Java" scheme="http://isudox.com/tags/Java/"/>
    
      <category term="Frontend" scheme="http://isudox.com/tags/Frontend/"/>
    
      <category term="Spring" scheme="http://isudox.com/tags/Spring/"/>
    
      <category term="Thymeleaf" scheme="http://isudox.com/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 探险第四弹</title>
    <link href="http://isudox.com/2016/07/04/leetcode-tour-4/"/>
    <id>http://isudox.com/2016/07/04/leetcode-tour-4/</id>
    <published>2016-07-04T07:06:59.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录 LeetCode 算法部分第 16-20 题。</p>
<a id="more"></a>
<h3 id="3Sum-Closest"><a href="#3Sum-Closest" class="headerlink" title="3Sum Closest"></a>3Sum Closest</h3><p>第 16 题 <a href="https://leetcode.com/problems/3sum-closest/" target="_blank" rel="external">3Sum Closest</a></p>
<blockquote>
<p>给定一个包含 n 个整型数的数组 S，找出 S 中的三个数，使得三者求和的结果和目标值最接近。返回求和结果，假定 S 中一定存在唯一解。<br>举例：数组 S = { -1 2 1 -4 }，目标值 target = 1。最接近目标值的求和结果为 (-1 + 2 + 1 = 2)</p>
</blockquote>
<p>这题是第 15 题的延伸。沿用前一题的思路，先对数组进行排序，取 a(i) + a(i+k) + a(n) 求和，如果结果和目标值一致，则直接将求和结果返回；如果结果大于目标值，则表明需要减小下标 n 的值，逐次减小，每次比较当前求和结果与目标值的差值和前一次求和比较的差值，取绝对值较小的保留，同时保留当前的求和结果；如果结果小于目标值，则需要增大下标 (i+k)。Java 代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ThreeSumClosest.java v1.0</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> diff = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> count = nums.length;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>, k = count - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">                <span class="keyword">int</span> curSum = nums[i] + nums[j] + nums[k];</div><div class="line">                <span class="keyword">int</span> curDiff = curSum - target;</div><div class="line">                <span class="keyword">if</span> (curDiff == <span class="number">0</span>) <span class="keyword">return</span> curSum;</div><div class="line">                diff = Math.abs(diff) &lt; Math.abs(curDiff) ? diff : curDiff;</div><div class="line">                sum = target + diff;</div><div class="line">                <span class="keyword">if</span> (curDiff &gt; <span class="number">0</span>) &#123;</div><div class="line">                    k--;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">120 / 120</td>
<td style="text-align:center">13 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ThreeSumClosest.java v1.1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> diff = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> count = nums.length;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">2</span>;) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>, k = count - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">                <span class="keyword">int</span> curSum = nums[i] + nums[j] + nums[k];</div><div class="line">                <span class="keyword">int</span> curDiff = Math.abs(curSum - target);</div><div class="line">                <span class="keyword">if</span> (curDiff == <span class="number">0</span>) <span class="keyword">return</span> curSum;</div><div class="line">                <span class="keyword">if</span> (curDiff &lt; diff) &#123;</div><div class="line">                    diff = curDiff;</div><div class="line">                    sum = curSum;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (curSum &gt; target) &#123;</div><div class="line">                    k--;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span> (i &lt; count - <span class="number">2</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">120 / 120</td>
<td style="text-align:center">11 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>Python 代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 3sum_closest.py</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type target: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        res, diff = sys.maxsize, sys.maxsize</div><div class="line">        count = len(nums)</div><div class="line">        nums.sort()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(count - <span class="number">2</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> i &lt; count <span class="number">-2</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            j, k = i + <span class="number">1</span>, count - <span class="number">1</span></div><div class="line">            <span class="keyword">while</span> j &lt; k:</div><div class="line">                cur_sum = nums[i] + nums[j] + nums[k]</div><div class="line">                cur_diff = cur_sum - target</div><div class="line">                <span class="keyword">if</span> cur_diff == <span class="number">0</span>:</div><div class="line">                    <span class="keyword">return</span> cur_sum</div><div class="line">                diff = diff <span class="keyword">if</span> abs(diff) &lt; abs(cur_diff) <span class="keyword">else</span> cur_diff</div><div class="line">                res = target + diff</div><div class="line">                <span class="keyword">if</span> cur_diff &gt; <span class="number">0</span>:</div><div class="line">                    k -= <span class="number">1</span></div><div class="line">                    <span class="keyword">while</span> j &lt; k <span class="keyword">and</span> nums[k] == nums[k + <span class="number">1</span>]:</div><div class="line">                        k -= <span class="number">1</span></div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    j += <span class="number">1</span></div><div class="line">                    <span class="keyword">while</span> j &lt; k <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</div><div class="line">                        j += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">120 / 120</td>
<td style="text-align:center">148 ms</td>
<td style="text-align:center">Python</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Letter-Combinations-of-a-Phone-Number"><a href="#Letter-Combinations-of-a-Phone-Number" class="headerlink" title="Letter Combinations of a Phone Number"></a>Letter Combinations of a Phone Number</h3><p>第 17 题 <a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="external">Letter Combinations of a Phone Number</a></p>
<blockquote>
<p>给定一个数字型的字符串，返回这些数字在手机九宫格键盘上所有可能表示的字母组合。<br>举例，输入字符串 “23”，输出结果：[ “ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf” ]<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt=""></p>
</blockquote>
<p>抽象的看这道题，其实就是排列组合。键盘上 “23” 按钮可能的输出结果就是 “abc” 和 “def” 两个字符串中字符的所有组合情况。从每个数字所代表的字符串中选取一个，并和下一个数字所代表的字符串中字符组合，逐个拼接，很显然，可以通过递归处理，递归深度为数字键的个数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LetterCombinationsOfaPhoneNumber.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] keymap = &#123;<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (digits == <span class="keyword">null</span> || digits.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</div><div class="line">        <span class="keyword">this</span>.combineLetters(digits, <span class="string">""</span>, digits.length(), <span class="number">0</span>, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combineLetters</span><span class="params">(String digits, String str, <span class="keyword">int</span> len, <span class="keyword">int</span> pos, List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">        String key = keymap[digits.charAt(pos) - <span class="string">'2'</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; key.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (pos == len - <span class="number">1</span>) list.add(str + key.charAt(i));</div><div class="line">            <span class="keyword">else</span> combineLetters(digits, str + key.charAt(i), len, pos + <span class="number">1</span>, list);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">25 / 25</td>
<td style="text-align:center">1 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h3><p>第 18 题 <a href="https://leetcode.com/problems/4sum/" target="_blank" rel="external">4Sum</a></p>
<blockquote>
<p>给定 n 个整型数组成的数组 S，从中找出所有可能的 4 个整数 a, b, c, d 使得 a + b + c + d = 目标值 target。要求去重。<br>如 S = [ 1, 0, -1, 0, -2, 2 ] target = 0，则结果为 [ [-1,  0, 0, 1], [-2, -1, 1, 2], [-2,  0, 0, 2] ]</p>
</blockquote>
<p>LeetCode 第 15 题 <a href="/2016/06/15/leetcode-tour-3/#3Sum">3Sum</a> 已经给出了数组中取 3 个数求和为零，本题为 4 个数求和为目标值。可以直接借用 3Sum 的算法，先选取数组中一个数，把剩下的数组元素和所需要的差值传递给 3Sum 方法，如果 3Sum 返回了有效结果，则把当前选取的数分别插入 3Sum 的结果中。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// FourSum.java v1.0</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> res;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> count = nums.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">3</span>; i++) &#123;</div><div class="line">            <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; count - <span class="number">3</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) i++;</div><div class="line">            <span class="keyword">int</span> diff = target - nums[i];</div><div class="line">            List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">this</span>.threeSum(Arrays.copyOfRange(nums, i + <span class="number">1</span>, count), diff);</div><div class="line">            <span class="keyword">if</span> (lists.isEmpty()) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</div><div class="line">                list.add(nums[i]);</div><div class="line">                res.add(list);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 3Sum</span></div><div class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> lists;</div><div class="line">        <span class="keyword">int</span> count = nums.length, i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; count - <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k = count - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[j] + nums[k];</div><div class="line">                <span class="keyword">if</span> (sum == target) &#123;</div><div class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    list.add(nums[i]);</div><div class="line">                    list.add(nums[j++]);</div><div class="line">                    list.add(nums[k--]);</div><div class="line">                    lists.add(list);</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    k--;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span> (i &lt; count - <span class="number">2</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> lists;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">282 / 282</td>
<td style="text-align:center">71 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<h3 id="Remove-Nth-Node-From-End-of-List"><a href="#Remove-Nth-Node-From-End-of-List" class="headerlink" title="Remove Nth Node From End of List"></a>Remove Nth Node From End of List</h3><p>第 19 题 <a href="https://leetcode.com/problems/remove-nth-node-from-end-of-list/" target="_blank" rel="external">Remove Nth Node From End of List</a></p>
<blockquote>
<p>给定一个链表，移除倒数第 n 个节点，返回该链表的首节点。<br>例如链表  <strong>1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</strong>，<strong>n = 2</strong>，移除倒数第 2 节点后的链表为 <strong>1 -&gt; 2 -&gt; 3 -&gt; 5</strong><br>假定 n 是有效的。</p>
</blockquote>
<p>普通链表是单向，假如是正向的移除第 n 个节点，很好做，但是反向的移除就需要动下脑筋。最直接的办法就是先遍历链表求其长度，减去 n 就是正向的节点位置，然后再做依次顺序遍历，找到要移除的节点。这种方法需要两次遍历。还有一种略微机智的方法，只需要做一次遍历，先让早起步的头指针移动 n 次，再让另一个慢起步的头指针开始移动，这样等早起步头指针到达最后一个节点的时候，后一个指针正好到达要移除的节点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RemoveNthNodeFromEndOfList.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        res.next = head;</div><div class="line">        ListNode node1 = res, node2 = res;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) node1 = node1.next;</div><div class="line">        <span class="keyword">while</span> (node1.next != <span class="keyword">null</span>) &#123;</div><div class="line">            node1 = node1.next;</div><div class="line">            node2 = node2.next;</div><div class="line">        &#125;</div><div class="line">        node2.next = node2.next.next;</div><div class="line">        <span class="keyword">return</span> res.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">207 / 207</td>
<td style="text-align:center">1 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<h3 id="Valid-Parentheses"><a href="#Valid-Parentheses" class="headerlink" title="Valid Parentheses"></a>Valid Parentheses</h3><p>第 20 题 <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="external">Valid Parentheses</a></p>
<blockquote>
<p>给出一个仅包含字符 <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> 和 <code>&#39;]&#39;</code> 的字符串，判断它是否有效。<br>有效的字符串必须是闭合的，如 <code>&quot;()&quot;</code> <code>{[()]}</code> 和 <code>&quot;()[]{}&quot;</code> 是有效的，而 <code>&quot;(]&quot;</code> 和 <code>&quot;([)]&quot;</code> 是无效的。</p>
</blockquote>
<p>从有效字符串的形式 <code>&quot;()&quot;</code> <code>{[()]}</code> 和 <code>&quot;()[]{}&quot;</code> 中可以看出，这很像是四则运算的中缀表达式。而四则运算的中缀表达式可以通过栈这种数据结构来存储。因为左半括号必定再其对应右半括号的前面，所以遍历到当前字符为左半括号时，将其入栈。遍历到右半括号时，将栈顶字符出栈，比较是否匹配。直到栈元素为空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ValidParentheses.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">char</span>[] stack = <span class="keyword">new</span> <span class="keyword">char</span>[s.length()];</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">'('</span> || s.charAt(i) == <span class="string">'['</span> || s.charAt(i) == <span class="string">'&#123;'</span>) &#123;</div><div class="line">                stack[index++] = s.charAt(i);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">')'</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (index == <span class="number">0</span> || stack[--index] != <span class="string">'('</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">']'</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (index == <span class="number">0</span> || stack[--index] != <span class="string">'['</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (index == <span class="number">0</span> || stack[--index] != <span class="string">'&#123;'</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">65 / 65</td>
<td style="text-align:center">0 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>下一篇：<a href="/2016/07/08/leetcode-tour-5/">LeetCode 探险第五弹</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录 LeetCode 算法部分第 16-20 题。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Algorithm" scheme="http://isudox.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://isudox.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Java String 的内存模型</title>
    <link href="http://isudox.com/2016/06/22/memory-model-of-string-in-java-language/"/>
    <id>http://isudox.com/2016/06/22/memory-model-of-string-in-java-language/</id>
    <published>2016-06-22T05:00:53.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前写的一篇博客中(<a href="/2016/02/17/difference-between-string-stringbuilder-stringbuffer/">String, StringBuilder, StringBuffer 区别</a>)，提到了 String 对象在内存中的存储问题，当时只是一笔带过，在本篇里，对这个问题做一点深入的探讨。</p>
<a id="more"></a>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><p>字符串几乎是 Java 语言里使用频率最高的类型了，尽管程序的各个角落都在使用字符串，但未必对它有完整、正确的认识。创建字符串变量通常有下面两种途径：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">"hello,world!"</span>; <span class="comment">// 通过字面值</span></div><div class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"hello,world!"</span>); <span class="comment">// 通过 new 关键字</span></div></pre></td></tr></table></figure></p>
<p>字符串 s1 和 s2 看起来似乎是一样的，那真的一样吗，上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Debug</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String s1 = <span class="string">"hello,world!"</span>;</div><div class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello,world!"</span>);</div><div class="line">        System.out.println(s1 == s2); <span class="comment">// false</span></div><div class="line">        System.out.println(Objects.equals(s1, s2)); <span class="comment">// true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>值都是 “hello,world!” 的字符串，然而两种比较的方式所得到的结果却不相同。字符串 s1 是通过字面值创建，字符串 s2 是通过关键字 new 创建，在分析这两种创建字符串方式的区别之前，先比较下 <code>==</code> 操作符和 <code>equals()</code> 方法在进行字符串比较时的差异。</p>
<p><code>==</code> 操作符比较的是两个对象的引用是否指向同一内存地址，如果内存地址相同，则返回 true；<code>equals()</code> 比较的只是两个字符串对象的引用指向的内存地址所存储的字面值，而忽略内存地址是否相同。这样再去看上面的代码，从输出结果逆推，s1 和 s2 的引用的值都是 “hello,world!”，因此调用 <code>equals()</code> 比较返回 true 不难理解，那 s1 和 s2 内存地址不同，又该怎么解释，下面就进入正题，探讨 Java 里 String 在内存中的存储模型。</p>
<h4 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h4><p>内存有栈和堆这两个概念：</p>
<ul>
<li>栈 <a href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation" target="_blank" rel="external">statck</a>: 栈区是内存中遵循先进后出（LIFO）原则的一块存储区域。在现代计算机系统中，每个线程在内存中都保有自己的一段栈空间。栈区存储基本类型，int, short, long, byte, float, double, boolean, char（注意，不包括 String，String 不是基本类型），以及对象的引用，比如 <code>int a = 1;</code> a 和 1 都存储在栈区，<code>Date date = new Date();</code> date 存储在栈区， new Date() 的对象则存储在堆区。线程中方法的调用也记录在栈区中，使得方法的结果能返回到正确的位置。栈区内存由系统自动分配并释放；</li>
<li>堆 <a href="https://en.wikipedia.org/wiki/Memory_management#HEAP" target="_blank" rel="external">heap</a>: 堆区存放由用户通过 new 操作创建的对象。系统不会自动释放堆区内存，比如 C++ 中执行 <code>new</code> 分配内存，执行 <code>delete</code> 释放被占用的内存。Java 因为 GC 机制，由 JVM 承担了手动释放内存的操作。</li>
</ul>
<p>栈因为严格遵循 LIFO， 其存取速度明显快于堆区。但栈区的数据和生命周期是在编译时就确定的，而堆区则可以在运行时动态分配内存空间。</p>
<p>下图展示了堆区和栈区存储内容的差异，图片来自 vikashazrati.files.wordpress.com<br><img src="https://o70e8d1kb.qnssl.com/stacknheap.png" alt=""></p>
<p>用接近系统底层的 C++ 语言程序简单演示下堆区和栈区分配内存的示例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// example.cpp</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> *pBuffer; <span class="comment">// 没有分配空间，除了指针本身，它被分配在了栈区</span></div><div class="line">    <span class="keyword">bool</span> b = <span class="literal">true</span>; <span class="comment">// 分配在栈区</span></div><div class="line">    <span class="keyword">if</span>(b)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 在栈区分配 500 byte 空间</span></div><div class="line">        <span class="keyword">char</span> buffer[<span class="number">500</span>];</div><div class="line">        <span class="comment">// 在堆区分配 500 byte 空间</span></div><div class="line">        pBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">500</span>];</div><div class="line">    &#125; <span class="comment">// buffer 的内存被释放, pBuffer 的还存在</span></div><div class="line">&#125; <span class="comment">// 如果没有执行 delete[] pBuffer，就会发生内存泄漏;</span></div></pre></td></tr></table></figure></p>
<p>通过字面值和 <code>new</code> 关键字创建字符串对象引用 s1、s2 和字符串 “hello,world!” 分别都存储在内存什么地方，一个个分析。<br>字符串 “hello,world!” 在堆区申请空间存储，因为字符串是常量具有不可变性，它被存储在堆区的一块名叫 “String Constant Pool” 的字符串常量池中，字符串常量池中的字符串只存在一份，即如果常量池中已存在 “hello,world!”，那么 s1 不会在常量池中申请新的空间，而是直接把引用指向已存在的字符串内存地址。另外，s1 是字符串 “hello,world!” 的引用，存储在栈区。前面讲到，由关键字 <code>new</code> 创建的对象被分配在了堆区，但和字面值赋值不同的是，<code>new</code> 出来的对象不只是在分配在堆区的字符串常量池，在 <code>new</code> 一个新的 String 对象时，首先会在堆区创建该 String 对象，并让栈区的对象引用指向它，然后在常量池中查询是否已存在相同内容的字符串，如果有，就将堆区的空间和常量池中的空间通过 <code>String.inter()</code> 关联起来，如果没有，则在常量池中申请空间存放该字符串对象，再做关联。参考下面的代码和实例图。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">"abc"</span>; </div><div class="line">String s2 = <span class="string">"xyz"</span>;</div><div class="line">String s3 = <span class="string">"123"</span>;</div><div class="line">String s4 = <span class="string">"A"</span>;</div><div class="line"></div><div class="line">String s5 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line"><span class="keyword">char</span>[] c = &#123;<span class="string">'J'</span>, <span class="string">'A'</span>, <span class="string">'V'</span>, <span class="string">'A'</span>&#125;;</div><div class="line">String s6 = <span class="keyword">new</span> String(c);</div><div class="line">String s7 = <span class="keyword">new</span> String(<span class="keyword">new</span> StringBuffer());</div></pre></td></tr></table></figure></p>
<p><img src="https://o70e8d1kb.qnssl.com/String-Constant-Pool.png" alt=""></p>
<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>梳理了那么多理论，还是要用实践来印证。测试下面的代码，看看结果如何——<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 由字面值创建字符串</span></div><div class="line">        String s1 = <span class="string">"hello,world!"</span>;</div><div class="line">        String s2 = <span class="string">"hello,world!"</span>;</div><div class="line">        System.out.println(s1 == s2);</div><div class="line">        System.out.println(Objects.equals(s1, s2));</div><div class="line">        <span class="comment">// 由 new 关键字创建字符串</span></div><div class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">"hello,world!"</span>);</div><div class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">"hello,world!"</span>);</div><div class="line">        System.out.println(s3 == s4);</div><div class="line">        System.out.println(Objects.equals(s3, s4));</div><div class="line"></div><div class="line">        System.out.println(s1 == s3);</div><div class="line">        System.out.println(s1 == s3.intern());</div><div class="line"></div><div class="line">        String s5 = <span class="string">"hello,"</span>;</div><div class="line">        String s6 = <span class="string">"world!"</span>;</div><div class="line">        System.out.println(s1 == s5 + s6);</div><div class="line">        System.out.println(s1 == <span class="string">"hello,"</span> + <span class="string">"world!"</span>);</div><div class="line">        System.out.println(s3 == s5 + s6);</div><div class="line">        System.out.println(s1 == (s5 + s6).intern());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// output: true true false true false true false true false true</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前写的一篇博客中(&lt;a href=&quot;/2016/02/17/difference-between-string-stringbuilder-stringbuffer/&quot;&gt;String, StringBuilder, StringBuffer 区别&lt;/a&gt;)，提到了 String 对象在内存中的存储问题，当时只是一笔带过，在本篇里，对这个问题做一点深入的探讨。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Java" scheme="http://isudox.com/tags/Java/"/>
    
      <category term="Memory" scheme="http://isudox.com/tags/Memory/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 探险第三弹</title>
    <link href="http://isudox.com/2016/06/15/leetcode-tour-3/"/>
    <id>http://isudox.com/2016/06/15/leetcode-tour-3/</id>
    <published>2016-06-15T12:18:15.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上篇 <a href="/2016/05/17/leetcode-tour-2/">LeetCode 探险第二弹</a>，第三弹记录第 11 到 15 题。</p>
<a id="more"></a>
<h3 id="Container-With-Most-Water"><a href="#Container-With-Most-Water" class="headerlink" title="Container With Most Water"></a>Container With Most Water</h3><p>第 11 题 <a href="https://leetcode.com/problems/container-with-most-water/" target="_blank" rel="external">Container With Most Water</a></p>
<blockquote>
<p>给出 n 个非负整数 a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub>，每个数指向一个坐标点 (i, a<sub>i</sub>)。该 n 个坐标点画出了 n 条纵线，即从 (i, a<sub>i</sub>) 到 (i, 0) 之间的线段。找出其中的两条线段和 x 轴形成的容器能装满最多的水。</p>
</blockquote>
<p>假设待求的这两条线段的坐标分别为(i, 0)-(i, a<sub>i</sub>) 和 (j, 0)-(j, a<sub>j</sub>)，那么容器的底座长度 L=Math.abs(i - j)，高度 H=Math.min(a<sub>i</sub>, a<sub>j</sub>)，容积 V=L*H。</p>
<p>最笨也是最直接的办法就是在循环里暴力枚举。把所有能组成的容器都测量一遍，不多说了，直接撸代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ContainerWithMostWater.java v1.0</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> maxV = <span class="number">0</span>, curV = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count = height.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</div><div class="line">                curV = (j - i) * (height[i] &lt; height[j] ? height[i] : height[j]);</div><div class="line">                maxV = Math.max(maxV, curV);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxV;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提交后被 Lee他Code 婉拒，因为 Time Limit Exceeded，这种解法时间复杂度是 O(n<sup>2</sup>)，当 n 很大时，运行时间随指数增长会非常可怕。只能想办法精简处理过程，是不是所有 0.5(n*(n-1)) 中组合都要计算一遍，必须不是。涉及两个变量长和高，因为长的最大值是已知的，从长度取最大开始比较：<br>先取首末两个点 1 和 n，容积是 V=(n-1)*Math.min(a<sub>1</sub>, a<sub>n</sub>)。除此之外的选点，长度不可能比这种情况大，要使长度变小的前提下，容积更大，必要条件就是 Math.min(a<sub>i</sub>, a<sub>j</sub>) 要大于 Math.min(a<sub>1</sub>, a<sub>n</sub>)。所以可以从首末两端往中间移动，求取容积并存储当前最大容积后，放弃两侧高度较小的那个点，并向中心移动，这样处理可以省去很多不必要的计算，时间复杂度降低到 O(n)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ContainerWithMostWater.java v1.1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> maxV = <span class="number">0</span>, curV = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = height.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</div><div class="line">            <span class="keyword">if</span> (height[i] &lt; height[j]) &#123;</div><div class="line">                curV = (j - i) * (height[i++]);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height[i] &gt; height[j]) &#123;</div><div class="line">                curV = (j - i) * (height[j--]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                curV = (j - i) * (height[i++]);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">            maxV = Math.max(maxV, curV);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxV;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">45 / 45</td>
<td style="text-align:center">5 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h3><p>第 12 题 <a href="https://leetcode.com/problems/integer-to-roman/" target="_blank" rel="external">Integer to Roman</a></p>
<blockquote>
<p>给出一个整型数，将其转换为罗马数字。输入的整数在 1-3999 之间。</p>
</blockquote>
<p>先来整理下罗马数字的表达方式：<br>1-9: “I”, “II”, “III”, “IV”, “V”, “VI”, “VII”, “VIII”, “IX”<br>10-90: “X”, “XX”, “XXX”, “XL”, “L”, “LX”, “LXX”, “LXXX”, “XC”<br>100-900: “C”, “CC”, “CCC”, “CD”, “D”, “DC”, “DCC”, “DCCC”, “CM”<br>1000-3000: “M”, “MM”, “MMM”</p>
<p>I 表示单位 1，V 表示单位 5。同理，X 表示 10，L 表示 50；C 表示 100，D 表示 500；M 表示 1000。单位较小的如果在单位较大的符号左边，则是相减关系，反之则是相加关系。</p>
<p>比如数字 432，先拆分成 400+20+3，即分别为 CD、XXX、II，所以转换结果是 CDXXXII；再比如 98，拆分为 90+8，即 XCVIII。<br>算法的关键就是把整数拆分成各个数位上所代表的数值的相加。通过二维字符串数组的索引位置和值的映射实现各个加和整数与罗马数字的对应。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IntegerToRoman.java v1.0</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String[] ones = &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</div><div class="line">        String[] tens = &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</div><div class="line">        String[] hundreds = &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</div><div class="line">        String[] thousands = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</div><div class="line">        String[][] romans = &#123;ones, tens, hundreds, thousands&#125;;</div><div class="line">        String res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> len = String.valueOf(num).length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">int</span> x = num / pow(<span class="number">10</span>, i);</div><div class="line">            res = res + romans[i][x];</div><div class="line">            num = num % pow(<span class="number">10</span>, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> z = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (; y &gt; <span class="number">0</span>; y--) z *= x;</div><div class="line">        <span class="keyword">return</span> z;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">3999 / 3999</td>
<td style="text-align:center">15 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>这种做法在细节上处理的很不好，算法复杂度略高，因为整数的分拆和转换罗马数字是从最高位开始，所以需要幂运算，浪费了一些运算时间。如果从整数的最低位开始处理，就不需要做幂运算了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IntegerToRoman.java v1.1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String[] ones = &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</div><div class="line">        String[] tens = &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</div><div class="line">        String[] hundreds = &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</div><div class="line">        String[] thousands = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</div><div class="line">        String[][] romans = &#123;ones, tens, hundreds, thousands&#125;;</div><div class="line">        String res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> digit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> x = num % <span class="number">10</span>;</div><div class="line">            res = romans[digit][x] + res;</div><div class="line">            num = num / <span class="number">10</span>;</div><div class="line">            digit++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">3999 / 3999</td>
<td style="text-align:center">12 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>另外再提供一个思路，罗马数字 1 - 3999 的匹配过程中，9*10<sup>n</sup>，5*10<sup>n</sup> 和 4*10<sup>n</sup> 是特殊的符号，因此把它们单独放进映射列表中。让整数从高位作消减，每减去一个数，就拼接该数所对应的罗马数字，直到不能再减为止。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IntegerToRoman.java v1.2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        String[] romans = &#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] ints = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</div><div class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length; i++) &#123;</div><div class="line">            <span class="keyword">while</span> (num &gt;= ints[i]) &#123;</div><div class="line">                res.append(romans[i]);</div><div class="line">                num -= ints[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">3999 / 3999</td>
<td style="text-align:center">8 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Roman-to-Integer"><a href="#Roman-to-Integer" class="headerlink" title="Roman to Integer"></a>Roman to Integer</h3><p>第 13 题 <a href="https://leetcode.com/problems/roman-to-integer/" target="_blank" rel="external">Roman to Integer</a></p>
<blockquote>
<p>给出一个罗马数字，将其转换为整型数。范围在 1-3999 之间。</p>
</blockquote>
<p>这题就是前一题的逆向。可以借用上面的思路，从字符串的首位开始寻找匹配的罗马数字，如果从首位开始的字符串能匹配罗马数字，则把该字符串截掉，继续匹配；如果没有匹配，则换下一个罗马数字继续判断是否匹配。这里有一个注意点，就是一旦匹配后截取子字符串时，要根据被截掉的罗马数字的长度来定截取的起始位置。Java 代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RomanToInteger.java v1.0</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        String[] romans = &#123;<span class="string">"M"</span>, <span class="string">"CM"</span>, <span class="string">"D"</span>, <span class="string">"CD"</span>, <span class="string">"C"</span>, <span class="string">"XC"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"X"</span>, <span class="string">"IX"</span>, <span class="string">"V"</span>, <span class="string">"IV"</span>, <span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] ints = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; romans.length;) &#123;</div><div class="line">            <span class="keyword">int</span> index = s.indexOf(romans[i]);</div><div class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">                res += ints[i];</div><div class="line">                s = s.substring(index + romans[i].length());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">3999 / 3999</td>
<td style="text-align:center">10 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>再换种思路，前一题分析时讲到，小单位在大单位左边时时相减的关系，反之则是相加的关系，比如 “IV” 表示 V-I=4，而 “VI” 表示 V+I=6。每次在匹配当前罗马数字时再去和前一位罗马数字进行比较，如果是比之前的大，则在加上当前罗马数字所代表的整数后还要减去前一位所代表的数字；如果比之前的要小，就只需要加上当前的数字。还有一个细节，如果当前罗马数字比前一位大，由于上一次操作时已经把前一位的数字加上去了，所以在操作当前罗马数字时需要减两次前一罗马数字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// RomanToInteger.java v1.1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, cur = <span class="number">0</span>, res = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</div><div class="line">            <span class="keyword">switch</span> (s.charAt(i)) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'M'</span>: cur = <span class="number">1000</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'D'</span>: cur = <span class="number">500</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'C'</span>: cur = <span class="number">100</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'L'</span>: cur = <span class="number">50</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'X'</span>: cur = <span class="number">10</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'V'</span>: cur = <span class="number">5</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'I'</span>: cur = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cur &gt; pre) &#123;</div><div class="line">                res += cur - pre * <span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                res += cur;</div><div class="line">            &#125;</div><div class="line">            pre = cur;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">3999 / 3999</td>
<td style="text-align:center">7 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h3><p>第 14 题 <a href="https://leetcode.com/problems/longest-common-prefix/" target="_blank" rel="external">Longest Common Prefix</a></p>
<blockquote>
<p>编写一个函数，找出给定的字符串数组中最长的公共前缀字符串。</p>
</blockquote>
<p>这是一道非常非常经典的算法题，江湖人称 “LCP”。由于限定了是前缀字符串，使得子字符串的起始位置是固定的，因此题目变得很好处理。<br>先判断两种特殊输入，字符串数组为空或者 <code>null</code>，以及字符串数组仅包含一个字符串这两种情况。<br>然后找出字符串数组中的最短字符串的长度，因为这个长度限定了最长公共前缀字符串的最大长度。接下来就从字符串的首位依次往后比较，一旦出现不相同的情况，保存当前的公共前缀字符串，立即终止比较。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LongestCommonPrefix.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (strs.length == <span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> minLen = strs[<span class="number">0</span>].length();</div><div class="line">        <span class="keyword">for</span> (String str : strs) &#123;</div><div class="line">            minLen = str.length() &lt; minLen ? str.length() : minLen;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; minLen; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs.length - <span class="number">1</span>; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (strs[j].charAt(i) != strs[j + <span class="number">1</span>].charAt(i)) &#123;</div><div class="line">                    <span class="keyword">return</span> strs[j].substring(<span class="number">0</span>, i);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, minLen);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">117 / 117</td>
<td style="text-align:center">2 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h3><p>第 15 题 <a href="https://leetcode.com/problems/3sum/" target="_blank" rel="external">3Sum</a></p>
<blockquote>
<p>有 n 个整型数组成的数组 S，其中是否存在 a, b, c 三个数，使得 a + b + c = 0？找出所有的组合。<br>比如给出数组 S = [ -1, 0, 1, 2, -1, -4 ]，结果就是：[ [-1, 0, 1], [-1, -1, 2] ]<br>注，需要去重。</p>
</blockquote>
<p>首先排除数组元素小于 3 的异常情况。因为三者求和为 0，因此必然包含正数和负数，所以把数组排序后如果首个元素大于 0，或者最后一个元素小于 0 都可以直接终止算法。另外，由于最终的结果不能有重复的组合，所以有必要对数组进行排序，这样方便去掉重复的数字组合。<br>对递增排序后的数组枚举，枚举时选定一个数 nums[i] 作为最小数，然后再从后面的数中选定中间数 nums[i+1] 和最大数 nums[n]，三者求和。如果结果等于 0，则需要把中间数和最大数的下标同时往中间移动，如果移动后的数和之前一样，则继续向中间移动，这样处理是一方面是节省不必要的运算，更重要的是为了去重；如果结果大于 0，相应的把最大数减小，即向左移动下标 n；如果结果小于 0，则把中间数的下标向右移动；直到中间数和最大数相遇为止。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3Sum.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>) <span class="keyword">return</span> res;</div><div class="line">        Arrays.sort(nums);</div><div class="line">        <span class="keyword">int</span> count = nums.length, i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (nums[i] &lt;= <span class="number">0</span> &amp;&amp; nums[count - <span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; i &lt; count - <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k = count - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (j &lt; k) &#123;</div><div class="line">                <span class="keyword">int</span> sum = nums[i] + nums[j] + nums[k];</div><div class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</div><div class="line">                    res.add(Arrays.asList(nums[i], nums[j++], nums[k--]));</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                    j++;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) j++;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    k--;</div><div class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) k--;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span> (i &lt; count - <span class="number">2</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Status</th>
<th style="text-align:center">Tests</th>
<th style="text-align:center">Run Time</th>
<th style="text-align:center">Language</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accepted</td>
<td style="text-align:center">311 / 311</td>
<td style="text-align:center">9 ms</td>
<td style="text-align:center">Java</td>
</tr>
</tbody>
</table>
<p>下一篇：<a href="/2016/07/04/leetcode-tour-4/">LeetCode 探险第四弹</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上篇 &lt;a href=&quot;/2016/05/17/leetcode-tour-2/&quot;&gt;LeetCode 探险第二弹&lt;/a&gt;，第三弹记录第 11 到 15 题。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Algorithm" scheme="http://isudox.com/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://isudox.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式的实际运用</title>
    <link href="http://isudox.com/2016/06/06/using-chain-of-responsibility-pattern/"/>
    <id>http://isudox.com/2016/06/06/using-chain-of-responsibility-pattern/</id>
    <published>2016-06-06T10:23:51.000Z</published>
    <updated>2016-07-26T09:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>加入 JD 已有大半年了，想了想差不多一直是在写业务代码。老实讲，有时候自己感觉有点累，对不断更改和新增的业务需求总是沿用低效堆代码的方式去解决，review 自己写的代码时，好像一直在 repeat yourself。代码不应该那样写，把复杂业务拆分，松耦合，利用设计模式将业务代码简化，而不是一味的去用过程编程的思维去实现业务逻辑，又苦又累毫无乐趣。</p>
<a id="more"></a>
<h3 id="重构之前"><a href="#重构之前" class="headerlink" title="重构之前"></a>重构之前</h3><p>趁着 JD 618 大促的机会，把陪伴计划项目部分业务重构了下。前期开发时因为业务需求多、时间紧张，没有对业务逻辑深入的分析，代码拿上来就写，导致逻辑的紧耦合、难以更改，难以扩展，面对新增的业务只能从头再写而无法做到有效复用。</p>
<p>要做到代码的合理复用，直接有效的途径就是把业务逻辑拆分细化，颗粒度最细的拆分就是将业务逻辑拆分成原子操作，但这样做会导致代码过于细碎，未免过犹不及。业务松耦合，并非零耦合。让每一个细分业务只负责单一逻辑，通过灵活可配的组合实现复杂逻辑，这是实现松耦合，提高扩展性行之有效的办法。</p>
<p>以这次的小范围重构为例，京东陪伴计划项目包含大量的优惠券促销业务，其逻辑涉及到诸多信息，比如宝贝档案、风险控制、券卡类别库存、会员信息、领取时间等多个维度。重构前的代码把优惠券业务里所涉及的多维度逻辑统统杂糅在一个接口实现里。这样的处理很草率，唯一的好处就是，在从零到一编写代码的过程中，思维可以很清楚的沿着业务逻辑线性写下去，说白了就是无脑编程。试想一下，如果优惠券部分的业务发生改变或者新增维度信息，很难灵活应变，而且代码冗余，牵扯面大，很难灵活扩展。</p>
<h3 id="原味责任链模式"><a href="#原味责任链模式" class="headerlink" title="原味责任链模式"></a>原味责任链模式</h3><p><a href="https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern" target="_blank" rel="external">责任链模式</a>的基本思想是通过连锁处理单元，链式的处理客户端请求。链是由一系列处理单元自由组成的集合，可以是直线、环、树状结构，不同的处理单元将业务逻辑解耦。责任链上的每个处理单元或节点，都是客户端请求的潜在处理者，且客户端请求必定会在责任链上被处理。<br><img src="https://o70e8d1kb.qnssl.com/Chain_of_responsibility1-2x.png" alt=""></p>
<p>标准的责任链结构，其节点包含处理方法 handle()，后一节点的引用 nextHandler，因此可以灵活配置责任链的每个节点，从而实现复杂业务的组合。<br><img src="https://o70e8d1kb.qnssl.com/Chain_of_responsibility__-2x.png" alt=""></p>
<p>客户端的请求从责任链的根节点开始，依次往下执行，如果当前节点能胜任处理工作，则完成任务，否则将请求往下传递，直到到达能处理该请求的节点。下面编写一段简单的 Java 示例代码：</p>
<p>先来一段又臭又长的代码，举个栗子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BullshitCode</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> cmd = Integer.parseInt(args[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">switch</span> (cmd) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                System.out.println(<span class="string">"my name is sudoz"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                System.out.println(<span class="string">"this is my site"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                System.out.println(<span class="string">"any advice is welcome"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">                System.out.println(<span class="string">"reach me via e-mail at me@isudox.com"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码没有什么实际意义，只是一种很具有代表性的写法，通过一长串的 <code>if-else</code> 逻辑去处理业务，导致所有可能的处理缓解都堆积杂糅在一块，设想一下如果新增了业务需求，是不是再往里面插一个 <code>if-else</code> 了事？总是用这种方式去写代码会让程序越来越臃肿，难以维护和扩展，尤其是当你接手别人的代码发现以百行计的 <code>if-else</code> 语句块时，你一定会一脸懵逼看不下去，沃泽法克什么鬼？！<br><img src="https://o70e8d1kb.qnssl.com/confused-face.png" alt=""></p>
<p>升职加薪对码农而言，就像是马儿眼前的草，给不给草啊，难道又要马儿跑又要马儿不吃草，互联网公司好像还真这么想……说多了就是两行泪，上头的 Boss 和 HR 们层层把关，不是想加就能加。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 管理层抽象类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Manager successor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(Manager successor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.successor = success;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Manager successor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.successor = successor;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(PromotionRequest request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 抠门的管理人员</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LittleBoss</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(PromotionRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getRise &lt;= <span class="number">1000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Give u the money"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            successor.handleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiddleBoss</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(PromotionRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getRise &lt;= <span class="number">2000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Give u the money"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            successor.handleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigBoss</span> <span class="keyword">extends</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(PromotionRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getRise &lt;= <span class="number">3000</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"Give u the money"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"Get the fxxk off!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>见过小中大领导后，我要提加薪申请了，看招！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    PromotionRequest request = <span class="keyword">new</span> PromotionRequest(<span class="number">5000</span>);</div><div class="line">    Manager LittleManager zhangsan = <span class="keyword">new</span> LittleManager();</div><div class="line">    Manager MiddleManager lisi = <span class="keyword">new</span> LittleManager();</div><div class="line">    Manager BigManager wangwu = <span class="keyword">new</span> LittleManager();</div><div class="line">    zhangsan.setSuccessor(lisi);</div><div class="line">    lisi.setSuccessor(wangwu);</div><div class="line"></div><div class="line">    zhangsan.handle(request);   <span class="comment">// heard "Get the fxxk off!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提交给部门领导张三了，我要加薪 5000，被驳回了，叫我滚蛋……生无可恋。</p>
<p>上面就是很简单的责任链模式的示例，只是表达下原始的责任链模式的实际过程，并不完善。真正的生产开发中运用责任链模式可以根据场景适当变型，接下来我就把我重构京东陪伴计划优惠券模块的过程简单记一笔。</p>
<h3 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h3><p>前面提到了京东陪伴计划对优惠券部分的业务的处理，比如客户端的优惠券展示，不同用户看到的可领优惠券是不同的，另外，后台配置的优惠券也是差异化的。因此优惠券的展示可能涉及到的维度有：业务类型，用户 ID，宝贝档案信息，券卡类型，用户等级，展示期，有效期，风控级别等，而且要有可扩展性，保不定哪天就要增加新维度。同样，优惠券的发放领取也涉及到类似的条件筛查。那重构前的代码是怎么处理的呢，其实就跟上一小节给出的那段又臭又长的代码一个样，就是不断的通过 <code>if-else</code> 去判断条件，如果符合了就予以展示或发放，不符合就舍去，这就是过程编程不好的地方，代码冗余，可重用性差，难以扩展。</p>
<p>不难发现，上面的优惠券场景是适用于责任链模式的，因为优惠券展示/发放所涉及到的各个筛查条件都可以作为责任链上的节点，只是在这里，不能做原教旨主义者，需要对教科书上的责任链模式略作改动，在配置用于优惠券展示/发放的责任链后，优惠券信息经过责任链的处理时，当前的责任节点必须对请求进行处理，而不是原始的责任链模式中提到的只有一个节点作为处理者。换个说法，每张可能的优惠券从责任链的起始节点开始被筛查，如果结果是真则往下一节点继续筛查，否则中断筛查，抛弃该潜在优惠券。</p>
<p>责任链节点对象，内有优惠券筛查处理器接口方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CheckChainNode</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 通用检查处理器</div><div class="line">    */</div><div class="line">    <span class="function">BizResult <span class="title">checkHandler</span><span class="params">(BizParameter param)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>责任链对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckChain</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CheckChain.class);</div><div class="line">    <span class="keyword">private</span> List&lt;CheckChainNode&gt; checkList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BizResult <span class="title">checkIt</span><span class="params">(BizParameter params)</span> </span>&#123;</div><div class="line">        BizResult result = <span class="keyword">new</span> BizResult();</div><div class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(checkList)) &#123;</div><div class="line">            <span class="comment">// 如果检查链为空</span></div><div class="line">            logger.error(<span class="string">"检查链为空"</span>);</div><div class="line">            result.setShowMessage(<span class="string">"检查链为空"</span>);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (CheckChainNode checkNode : checkList) &#123;</div><div class="line">                BizResult curResult = checkNode.checkHandler(params);</div><div class="line">                result = curResult == <span class="keyword">null</span> ? result : curResult;</div><div class="line">                <span class="keyword">if</span> (!result.isSuccess()) <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            logger.error(<span class="string">"执行检查链时发生异常: &#123;&#125;"</span>, e);</div><div class="line">            result.setResultCode(-<span class="number">1</span>);</div><div class="line">            result.setShowMessage(<span class="string">"执行检查链时发生异常"</span>);</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (result.isSuccess()) result.setBizParameter(params);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;CheckChainNode&gt; <span class="title">getCheckList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> checkList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * Spring 配置注入</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCheckList</span><span class="params">(List&lt;CheckChainNode&gt; checkList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.checkList = checkList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>责任链节点的多种实现，分别对应不同的筛查条件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value = <span class="string">"timeCheckHandlerNode"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeCheckHandlerNode</span> <span class="keyword">implements</span> <span class="title">CheckChainNode</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BizResult <span class="title">checkHandler</span><span class="params">(BizParameter param)</span> </span>&#123;</div><div class="line">        BizResult result = <span class="keyword">new</span> BizResult();</div><div class="line">        <span class="keyword">if</span> (param != <span class="keyword">null</span> &amp;&amp; !param.isEmpty()) &#123;</div><div class="line">            String pin = param.getString(CouponConst.PIN);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> age = param.getInt(CouponConst.AGE);</div><div class="line">            CouponBatch couponBatch = param.getObject(CouponConst.COUPON, CouponBatch.class);</div><div class="line">            result.setSuccess(<span class="keyword">this</span>.doCheck(couponBatch, age));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doCheck</span><span class="params">(CouponBatch couponBatch, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Date today = <span class="keyword">new</span> Date();</div><div class="line">        <span class="keyword">return</span> couponBatch.getValidityStartTime().before(today) &amp;&amp;</div><div class="line">                couponBatch.getValidityEndTime().after(today) &amp;&amp;</div><div class="line">                couponBatch.getEndTime().after(today) &amp;&amp;</div><div class="line">                couponBatch.getMinPreferAge() &lt;= age &amp;&amp;</div><div class="line">                couponBatch.getMaxPreferAge() &gt;= age;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 其余筛查节点略过</span></div><div class="line"><span class="meta">@Service</span>(value = <span class="string">"riskCheckHandlerNode"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RiskCheckHandlerNode</span> <span class="keyword">implements</span> <span class="title">CheckChainNode</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span>(value = <span class="string">"stockCheckHandlerNode"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockCheckHandlerNode</span> <span class="keyword">implements</span> <span class="title">CheckChainNode</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>Spring 配置优惠券筛查的责任链，注入检查链对象<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></div><div class="line">       <span class="attr">default-autowire</span>=<span class="string">"byName"</span>&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 优惠券展示链 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"displayCouponCheckChain"</span> <span class="attr">class</span>=<span class="string">"com.isudox.service.coupon.CheckChain"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkList"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"timeCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"riskCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"receivedCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stockCheckHandlerNode"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 优惠券发放链 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sendCouponCheckChain"</span> <span class="attr">class</span>=<span class="string">"com.isudox.service.coupon.CheckChain"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkList"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"receivedCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stockCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"timeCheckHandlerNode"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"riskCheckHandlerNode"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样就可以对优惠券部分的业务灵活配置，如果需要新增逻辑，不用更改已有的代码，再实现一个 CheckChainNode 接口就可以了。另外，如果想更改筛查链，也只需要对 Spring 的配置进行修改，重启实例就能生效，无需再次编译发布。简直轻松愉快！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;加入 JD 已有大半年了，想了想差不多一直是在写业务代码。老实讲，有时候自己感觉有点累，对不断更改和新增的业务需求总是沿用低效堆代码的方式去解决，review 自己写的代码时，好像一直在 repeat yourself。代码不应该那样写，把复杂业务拆分，松耦合，利用设计模式将业务代码简化，而不是一味的去用过程编程的思维去实现业务逻辑，又苦又累毫无乐趣。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://isudox.com/categories/Coding/"/>
    
    
      <category term="Java" scheme="http://isudox.com/tags/Java/"/>
    
      <category term="DesignPatterns" scheme="http://isudox.com/tags/DesignPatterns/"/>
    
      <category term="Refactoring" scheme="http://isudox.com/tags/Refactoring/"/>
    
  </entry>
  
</feed>
